# Совмещение с модом — после согласования переменных убрать
init:
    $ alt_pe = 0                                # Соперник в 1 туре
    $ alt_day2_hf2 = 0                          # Соперник в полуфинале
    $ alt_day2_f1 = 0                           # Соперник в финале
    $ alt_day2_round1 = 0                       # Результат Семена в  1 раунде
    $ alt_day2_round2 = 0                       # Результат Семена во 2 раунде
    $ alt_day2_round3 = 0                       # Результат Семена в  3 раунде
    $ alt_day2_fail = 0                         # В каком туре Семён проиграл
    $ alt_day2_dv_bet_won = 0                   # Что-то с Алисой? (1 выиграл турнир, 2 — продул ей лично или она прошла дальше?)
# -----------------------------------------------------------------------------------------------


init 10 python:
# -----------------------------------------------------------------------------------------------
# спрайты соперников
    alt_sprites_rival_recognition = {             #['эмоция', 'одежда', положение]
        "un":   ['shy',    'pioneer',  cright],
        "sl":   ['smile2', 'pioneer',  cright],
        "dv":   ['grin',   'pioneer2', cright],
        "mi":   ['smile',  'pioneer',  cright],
        "us":   ['laugh',  'pioneer',  cright],
        "sh":   ['normal', 'pioneer',  cright],
        "mz":   ['normal', 'pioneer',  cright]
    }
# ------------------------------------------------
init python:
# ------------------------------------------------
    if persistent.altCardsWonRivals_new == None:             # Выигрывали ли когда-то у этого соперника
        persistent.altCardsWonRivals_new = {
            'un':   False,
            'sl':   False,
            'dv':   False,
            'mi':   False,
            'us':   False,
            'sh':   False,
            'mz':   False
        }
# ------------------------------------------------
    alt_day2_gamblers_summary = {                           # результат турнира — кто на каком этапе как сыграл.
        'me':   [0,0,0],                                    # в списке:  0 — 1 тур, 1 — полуфинал, 2 — финал
        'un':   [0,0,0],                                    # значение:  0 — результат не определен, 2 — победа, 1 — поражение
        'sl':   [0,0,0],                                    # в итоге: результат = 10 х индекс + значение
        'dv':   [0,0,0],                                    # 0 — не участвовал, 2/1 — победа/поражение в 1 коне; 12/11 — в 1/2; 22/21 — в финале
        'mi':   [0,0,0],
        'us':   [0,0,0],
        'sh':   [0,0,0],
        'mz':   [0,0,0]
        }

    alt_day2_gamblers_result = {
        'me':   0,
        'un':   0,
        'sl':   0,
        'dv':   0,
        'mi':   0,
        'us':   0,
        'sh':   0,
        'mz':   0
        }


# ------------------------------------------------
init:
# Переменные турнира — тур до двух побед
    $ alt_day2_my_win = 0                                   # Количество побед Семёна в коне
    $ alt_day2_rival_win = 0                                # Количество побед соперника в коне
    $ alt_day2_game_played_out = 0                          # сколько раз сыграли в коне
    $ alt_day2_result_current_game = 0                      # результат текущей игры
    $ alt_hint_poker_contractual = False                    # Комбинации на руках не показываются при игре


# Переменные турнира — рассадка и прочее
    $ wipedown2 = CropMove(1.3, "wipedown")

    $ alt_day2_result_tour = 0                                                          # Итог тура (0-начало, 2/1 — победа/поражение в 1 коне; 12/11 — в 1/2; 22/21 — в финале )
    $ alt_day2_detour_1_tour = False                                                    # Пропуск 1 тура (если скип турнира)
    $ alt_day2_detour_semifinal = False                                                 # Пропуск 1/2  (если скип турнира)
    $ alt_day2_detour_final = False                                                     # Пропуск финала  (если скип турнира)
    $ alt_day2_tournament_fast_win = False                                              # Победа в финале (если скип турнира)
    $ alt_tournament_state = None                                                       # этап турнира
    $ alt_my_rival_semifinal = None                                                     # Неуловимый второй финалист
    $ alt_mstt = 0                                                                      # глобальный счетчик турнирной таблицы
    $ alt_day2_gamblers_begin = []                                                      # Пустой список игроков при рассадке
    $ alt_winners_1_tour = []                                                           # Пустой список победителей 1 тура
    $ alt_losers_1_tour = []                                                            # Пустой список проигравших в 1 туре
    $ alt_winners_semifinal = []                                                        # Пустой список победителей полуфинала
    $ alt_losers_semifinal = []                                                         # Пустой список проигравших в полуфинале


# Новые persistent'ы турнира
    if persistent.altCardsDemo_new == None:
        $ persistent.altCardsDemo_new = False
    if persistent.altCardsFail_new == None:
        $ persistent.altCardsFail_new = False
    if persistent.altCardsWon1_new == None:
        $ persistent.altCardsWon1_new = False
    if persistent.altCardsWon2_new == None:
        $ persistent.altCardsWon2_new = False
    if persistent.altCardsWon3_new == None:
        $ persistent.altCardsWon3_new = False
    if persistent.altRulesRead_new == None:
        $ persistent.altRulesRead_new = False

# ------------------------------------------------
    # КАРТИНКИ МАСТЕЙ В ОПИСАНИЕ ПРАВИЛ ТУРНИРА — В РЕЛИЗЕ РАСКОММЕНТИРОВАТЬ
    # image suit_2ch_S = im.Scale(get_image_7dl("gui/tournament/suit/suit_2ch.png"),21,28)
    # image suit_2ch_L = im.Scale(get_image_7dl("gui/tournament/suit/suit_2ch.png"),26,35)
    # image suit_ussr_S = im.Scale(get_image_7dl("gui/tournament/suit/suit_ussr.png"),21,28)
    # image suit_ussr_L = im.Scale(get_image_7dl("gui/tournament/suit/suit_ussr.png"),26,35)
    # image suit_utan_S = im.Scale(get_image_7dl("gui/tournament/suit/suit_utan.png"),21,28)
    # image suit_utan_L = im.Scale(get_image_7dl("gui/tournament/suit/suit_utan.png"),26,35)
    # image suit_uvao_S = im.Scale(get_image_7dl("gui/tournament/suit/suit_uvao.png"),21,28)
    # image suit_uvao_L = im.Scale(get_image_7dl("gui/tournament/suit/suit_uvao.png"),26,35)

# --------------  # картинки в папке теста — В РЕЛИЗНОЙ ВЕРСИИ ИХ НАДО УБРАТЬ
    image suit_2ch_S = im.Scale('scenario_alt/~Test_rel/suit/suit_2ch.png',21,28)
    image suit_2ch_L = im.Scale('scenario_alt/~Test_rel/suit/suit_2ch.png',26,35)
    image suit_ussr_S = im.Scale('scenario_alt/~Test_rel/suit/suit_ussr.png',21,28)
    image suit_ussr_L = im.Scale('scenario_alt/~Test_rel/suit/suit_ussr.png',26,35)
    image suit_utan_S = im.Scale('scenario_alt/~Test_rel/suit/suit_utan.png',21,28)
    image suit_utan_L = im.Scale('scenario_alt/~Test_rel/suit/suit_utan.png',26,35)
    image suit_uvao_S = im.Scale('scenario_alt/~Test_rel/suit/suit_uvao.png',21,28)
    image suit_uvao_L = im.Scale('scenario_alt/~Test_rel/suit/suit_uvao.png',26,35)
# ------------------------------------------------

init 2 python:
# ===============================================================================================
#                   СЛОВАРИ, ТАУНТЫ, ПРЕДСТВАЛЕНИЯ СТОЛОВ, ДИАЛОГИ И Т. П.
# -----------------------------------------------------------------------------------------------



# ===============================================================================================
# ОСОБЫЕ РАСКЛАДЫ — ПРЕДСТАВЛЕНИЕ СТОЛА ВМЕСТО СТАНДАРТНОГО, ПРИ ДАННОМ СОЧЕТАНИИ ИГРОКОВ
# -----------------------------------------------------------------------------------------------
# Ключ: me+sh (по алфафиту); Значения: суффикс представления, падеж стола, падежи игроков
    alt_table_special_name = {
        "me+sh":    ["образовалась мужская компания:","t","i"],                                                 # Семён + Шурик, стол: ТП, игроки: ИП
        "dv+us":    ["оккупировали рыжие:","i","i"],                                                            # Алиса + Ульяна, стол: ИП, игроки: ИП
        "sh+un":    ["расположилось выездное заседание редколлегии в составе:","t","r"],                        # Шурик + Лена, стол: ТП, игроки: РП
        "dv+mi":    ["заняли наши музыканты:","i","i"]                                                          # Алиса + Мику, стол: ИП, игроки: ИП

        }

# ===============================================================================================
# ВЗАИМНЫЕ ТАУНТЫ ИГРОКОВ — ПОКАЗЫВАЮТСЯ ВМЕСТО СТАНДАРТНЫХ (ПРИОРИТЕТ 1 — ВЫСШИЙ)
# отсортировано по возможным сочетаниям ников в алфавитном порядке
#
# (фразы пока "от балды", для проверки алгоритма, нужна корректировка по контексту)
# -----------------------------------------------------------------------------------------------
    alt_table_mutual_taunt = {
        "dv+me":    "Двачевская с вызовом уставилась на меня, явно намекая на беседу у крыльца.",
        "dv+mi":    "Мику настороженно покосилась на Алису, пока та с видом победителя устраивалась за столом.",
        "dv+mz":    "Алиса пыталась хорохориться, а вот Женя в противовес ей была совершенно индифферентна. ",
        "dv+sh":    "Алиса плотоядно уставилась на Шурика, но тот, похоже, вообще не обратил на неё внимания. ",
        "dv+sl":    "Идеальное решение. Человек, который хочет выиграть во что бы то ни стало против человека, которому все эти глупости не нужны.",
        "dv+un":    "Алиса подмигнула, а Лена, как у крыльца, съёжилась и попыталась спрятаться под стол.",
        "dv+us":    "Две рыжие сцепились взглядами — ни та, ни другая явно не собирались уступать! ",
        "me+mi":    "Мику села напротив меня и улыбнулась: кажется, она понятия не имел о том, что за игра грядёт, но всеми силами старалась получать удовольствие. ",
        "me+mz":    "Жужелица опустилась на стул с видом величайшего одолжения, видимо, желая, чтобы всё это завершилось побыстрее. ",
        "me+sh":    "Очкарик сел напротив и смутно знакомым жестом поправил очки на переносице. ",
        "me+sl":    " ",    # Семён + Славя
        "me+un":    " ",    # Семён + Лена
        "me+us":    "Ульянка плюхнулась на стул напротив меня и, поглядев, не смотрит ли кто, украдкой показала мне язык. ",
        "mi+mz":    " ",    # Мику + Женя
        "mi+sh":    " ",    # Мику + Шурик
        "mi+sl":    " ",    # Мику + Славя
        "mi+un":    " ",    # Мику + Лена
        "mi+us":    " ",    # Мику + Ульяна
        "mz+sh":    " ",    # Женя + Шурик
        "mz+sl":    " ",    # Женя + Славя
        "mz+un":    " ",    # Женя + Лена
        "mz+us":    " ",    # Женя + Ульяна
        "sh+sl":    " ",    # Шурик + Славя
        "sh+un":    " ",    # Шурик + Лена
        "sh+us":    "Ульянка тут же зашептала что-то Шурику на ухо, я успел расслышать что-то вроде «вступлю в клуб».", # Шурик + Ульяна
        "sl+un":    " ",    # Славя + Лена
        "sl+us":    " ",    # Славя + Ульяна
        "un+us":    " ", # Лена + Ульяна
        }

# -----------------------------------------------------------------------------------------------
# ТАУНТЫ ДЛЯ ИГРОКОВ В ПАРЕ С СЕМЁНОМ — (ПРИОРИТЕТ 2)
# отсортировано по условному номеру игрока
# Количество фраз для каждого соперника может быть ЛЮБЫМ (не обязательно одинаковым), выбор рандомный
# (фразы в основном авторские, есть и отсебятина, для проверки алгоритма, нужна корректировка по контексту)
# -----------------------------------------------------------------------------------------------
    alt_table_taunt_with_me = {
        "un":   [           # Лена
                    "Лена сидела напротив меня.",
                    "С противоположной стороны стола мне робко улыбалась Лена."
                ],
        "sl":   [           # Славя
                    "Напротив меня сидела Славя."
                ],
        "dv":   [           # Алиса
                    "Алиса, улыбаясь, сидела напротив меня.",
                    "С противоположной стороны ехидно усмехалась Рыжевская."
                ],
        "mi":   [           # Мику
                    "Японка лучезарно улыбалась мне по ту сторону стола.",
                    "С противоположной стороны стола расположилась аниме-девочка.",
                    "Мику удобно устроилась напротив меня."
                ],
        "us":   [           # Ульяна
                    "Ульянка корчила мне рожи с той стороны стола.",
                    "На противоположном стуле ёрзала мелкая."
                ],
        "sh":   [           # Шурик (для пробы оставим пустым)
                    None
                ],
        "mz":   [           # Женя (картинки без очков)
                    "С противоположной стороны стола на меня зыркала нелюдимая библиотекарша."
                ]
        }

# ===============================================================================================
# ТАУНТЫ ДЛЯ ИГРОКОВ, ЕСЛИ СИДЯТ ДРУГ С ДРУГОМ = ПО ВТОРОМУ ИГРОКУ В ПАРЕ — (ПРИОРИТЕТ 3)
# отсортировано по условному номеру игрока
# Количество фраз для каждого соперника может быть ЛЮБЫМ (не обязательно одинаковым), выбор рандомный
#  (фразы в основном авторские, есть и отсебятина, для проверки алгоритма, нужна корректировка по контексту)
# ПЛОХИЕ НОВОСТИ — внутритекстовые теги работать не будут.
# -----------------------------------------------------------------------------------------------
#внимание: эти фразы показываются после строк типа "n стол принадлежал Лене и Славе" и относятся ко второму имени (Славе). Поэтому вместо "девочка" и "она" нужно указывать имя
    alt_table_taunt_gamblers = {
        "un":   [           # Лена
                    "Девочка перехватила мой взгляд и вся покраснела.",
                    "Девочка притворилась, что не заметила, как я смотрю на неё.",
                    "Удивлён, что она согласилась участвовать в публичном мероприятии."
                ],
        "sl":   [           # Славя
                    "Славя почувствовала, что я на неё смотрю, и улыбнулась.",
                    "Славя ободряюще кивнула мне.",
                    "Странно было видеть «правильную» девочку с картами в зубах."
                ],
        "dv":   [           # Алиса
                    "Двачевская расхохоталась, увидев, как я притворяюсь, что не смотрю на неё.",
                    "Надеюсь, она слетит в этом же раунде!",
                    "Ну уж это-та своего не упустит."
                ],
        "mi":   [           # Мику
                    "Вид у японки был забавный — она изо всех сил притворялась, что знает, зачем здесь находится.",
                    "За эту переживать не приходится — она, похоже, вообще к картам равнодушна.",
                    "Японка явно была чем-то взволнована. И дело было совсем не в картах."
                ],
        "us":   [           # Ульяна
                    "Мелкая показала мне язык и отвернулась.",
                    "Мелкая была занята запугиванием оппонента.",
                    "Она улыбалась и качала головой, готовясь к решительной победе!"
                ],
        "sh":   [           # Шурик
                    "Он подмигнул мне и выставил большой палец.",
                    "Прикрыв глаза, кибернетик что-то высчитывал в уме. Шансы на победу?",
                    "Парень, похоже, и в самом деле ни разу не слышал про такую игру — выглядел он растерянным."
                ],
        "mz":   [           # Женя
                    "Она, как обычно, проигнорировала меня.",
                    "Видно было, что она рада бы всё бросить и пойти в библиотеку.",
                    "Вот уж кто тут явно выглядит чужеродно."
                ]
        }

# ===============================================================================================
#  Для каждой пары "победитель/проигравший" приоритет 1
#  отсортировано по сочетаниям ников в алфавитном порядке (победитель > проигравший)
#           МОЖНО добавить варианты — с дальнейшим рандомным выбором
#    (фразы — отсебятина, для проверки алгоритма, нужна корректировка по контексту)
#
#    Сначала идут фразы победителя
#    разделитель блоков "*"
#    ниже — фразы проигравшего
#    если сочетание "xx>yy" не найдено — обработчик эту таблицу пропустит
#    если не найден разделитель "*" или их найдено больше одного — обработчик пропустит таблицу
#    одной из частей, либо обеих частей может не быть (т.е. "*" стоит вначале или конце списка)
#    если  в одной из частей нет строк, или первая строка блока [None, None] или [None, " "] или [] —
#    обрабочик пропустит этот блок — т. е. будет считать его пустым
#
#   структура: [кто говорит (или None  — если "от автора"), что говорит]
#   если несколько строк — и выводиться будет в несколько строк
#
#
#   ПЛОХИЕ НОВОСТИ — внутритекстовые теги (например, {w}) работать не будут.
# -----------------------------------------------------------------------------------------------
    alt_table_mutual_gamblers_win_los = {
# ------------------------------------------- Алиса
        "dv>me":    [       # Алиса > Семён
                        [th, "Жульничала, сто процентов жульничала!"],
                        [None, "Алиса встала и взяв в каждую руку по карте, припечатала мне на плечи."],
                        [dv, "На погоны!"],
                        [None, "Расхохоталась она."],
                        "*",
                        [me, "Случайность, просто повезло."],
                        [None, "Проборомотал я, выбирась из-за стола."]
                    ],
        "dv>mi":    [       # Алиса > Мику
                        [None, "Двачевская вскочила из-за стола и заулюлюкала:"],
                        [dv, "Оле-оле-оле! Алиса, вперёд!"],
                        [None, "Она радовалась своей победе так, будто выиграла как минимум машину."],
                        "*",
                        [mi, "Ничего-ничего, Алисочка. Я тебе всёёёё припомню."],
                        [None, "Мику задрала нос и отошла к зрителям."]
                    ],
        "dv>mz":    [       # Алиса > Женя
                        [None, "Несмотря на разгромную победу, Алиса почему-то не выглядела счастливой."],
                        [dv, "Всё, да?"],
                        [None, "Растерянно спросила она у Жени."],
                        "*",
                        [mz, "Аллилуйя, наконец, я могу быть свободна."],
                        [None, "Проскрипела Женя и убралась прочь из столовой."]
                    ],
        "dv>sh":    [       # Алиса > Шурик
                        [None, "Победив, Алиса повела себя странно."],
                        [None, "Она встала из-за стола и, приложив к глазам вывернутые ладони в жесте очкарика, покачала локтями."],
                        [dv, "Очкарики в пролёте! Адью."],
                        "*",
                        [sh, "Зачем только шёл…"],
                        [None, "Шурик безразлично пожал плечами и встал из-за стола."]
                    ],
        "dv>sl":    [       # Алиса > Славя
                        [None, "Проиграв, Славя улыбнулась и кивнула Алисе."],
                        [sl, "Всё? Я могу идти?"],
                        [None, "Алиса кивнула, её интересовал только финал."],
                        "*",
                        [dv, "А ты ничего, выскочка, играть умеешь."],
                        [None, "Обронила она, направляясь к столу полуфиналистов."]
                    ],
        "dv>un":    [       # Алиса > Лена
                        [None, "Алиса снисходительно посмотрела на Лену."],
                        [dv, "Будто кто-то сомневался, что будет иначе!"],
                        [None, "Перегнувшись, она щёлкнула оппонентку по лбу."],
                        "*",
                        [un, "Да не особо и хотелось."],
                        [None, "Лена сделала вид, что её не волнуют результаты матча."]
                    ],
        "dv>us":    [       # Алиса > Ульяна
                        [None, "Победив свою подругу, рыжая высокомерно задрала нос:"],
                        [dv, "Слишком юн ты, падаван, попробуй в следующем году."],
                        "*",
                        [us, "Смотрите на эту старую грымзу."],
                        [None, "Ульянку задело поражение, и она не скрывала это."]
                    ],
# ------------------------------------------- Семён
        "me>dv":    [       # Семён > Алиса
                        [None, " "],
                        "*",
                        [None, " "]
                    ],
        "me>mi":    [       # Семён > Мику
                        [None, " "],
                        "*",
                        [None, " "]
                    ],
        "me>mz":    [       # Семён > Женя
                        [None, " "],
                        "*",
                        [None, " "]
                    ],
        "me>sh":    [       # Семён > Шурик
                        [None, " "],
                        "*",
                        [None, " "]
                    ],
        "me>sl":    [       # Семён > Славя
                        [None, " "],
                        "*",
                        [None, " "]
                    ],
        "me>un":    [       # Семён > Лена
                        [None, " "],
                        "*",
                        [None, " "]
                    ],
        "me>us":    [       # Семён > Ульяна
                        [None, " "],
                        "*",
                        [None, " "]
                    ],
# ------------------------------------------- Мику
        "mi>dv":    [       # Мику > Алиса
                        [None, " "],
                        "*",
                        [None, " "]
                    ],
        "mi>me":    [       # Мику > Семён
                        [None, " "],
                        "*",
                        [None, " "]
                    ],
        "mi>mz":    [       # Мику > Женя
                        [None, " "],
                        "*",
                        [None, " "]
                    ],
        "mi>sh":    [       # Мику > Шурик
                        [None, " "],
                        "*",
                        [None, " "]
                    ],
        "mi>sl":    [       # Мику > Славя
                        [None, " "],
                        "*",
                        [None, " "]
                    ],
        "mi>un":    [       # Мику > Лена
                        [None, " "],
                        "*",
                        [None, " "]
                    ],
        "mi>us":    [       # Мику > Ульяна
                        [None, " "],
                        "*",
                        [None, " "]
                    ],
# ------------------------------------------- Женя
        "mz>dv":    [       # Женя > Алиса
                        [None, " "],
                        "*",
                        [None, " "]
                    ],
        "mz>me":    [       # Женя > Семён
                        [None, " "],
                        "*",
                        [None, " "]
                    ],
        "mz>mi":    [       # Женя > Мику
                        [None, " "],
                        "*",
                        [None, " "]
                    ],
        "mz>sh":    [       # Женя > Шурик
                        [None, " "],
                        "*",
                        [None, " "]
                    ],
        "mz>sl":    [       # Женя > Славя
                        [None, " "],
                        "*",
                        [None, " "]
                    ],
        "mz>un":    [       # Женя > Лена
                        [None, " "],
                        "*",
                        [None, " "]
                    ],
        "mz>us":    [       # Женя > Ульяна
                        [None, " "],
                        "*",
                        [None, " "]
                    ],
# ------------------------------------------- Шурик
        "sh>dv":    [       # Шурик > Алиса
                        [None, " "],
                        "*",
                        [None, " "]
                    ],
        "sh>me":    [       # Шурик > Семён
                        [None, " "],
                        "*",
                        [None, " "]
                    ],
        "sh>mi":    [       # Шурик > Мику
                        [None, " "],
                        "*",
                        [None, " "]
                    ],
        "sh>mz":    [       # Шурик > Женя
                        [None, " "],
                        "*",
                        [None, " "]
                    ],
        "sh>sl":    [       # Шурик > Славя
                        [None, " "],
                        "*",
                        [None, " "]
                    ],
        "sh>un":    [       # Шурик > Лена
                        [None, " "],
                        "*",
                        [None, " "]
                    ],
        "sh>us":    [       # Шурик > Ульяна
                        [None, "Шурик снисходительно посмотрел на Ульяну — мол, знай наших."],
                        [sh, "Спасибо за игру."],
                        [None, "Вежливо поблагодарил он."],
                        "*",
                        [us, "Бу-бу-бу, вредина, не дал ребёнку победить!"],
                        [None, "Ульяна надулась и отвернулась."]
                    ],
# ------------------------------------------- Славя
        "sl>dv":    [       # Славя > Алиса
                        [None, " "],
                        "*",
                        [None, " "]
                    ],
        "sl>me":    [       # Славя > Семён
                        [None, " "],
                        "*",
                        [None, " "]
                    ],
        "sl>mi":    [       # Славя > Мику
                        [None, " "],
                        "*",
                        [None, " "]
                    ],
        "sl>mz":    [       # Славя > Женя
                        [None, " "],
                        "*",
                        [None, " "]
                    ],
        "sl>sh":    [       # Славя > Шурик
                        [None, " "],
                        "*",
                        [None, " "]
                    ],
        "sl>un":    [       # Славя > Лена
                        [None, " "],
                        "*",
                        [None, " "]
                    ],
        "sl>us":    [       # Славя > Ульяна
                        [None, " "],
                        "*",
                        [None, " "]
                    ],
# ------------------------------------------- Лена
        "un>dv":    [       # Лена > Алиса
                        [None, " "],
                        "*",
                        [None, " "]
                    ],
        "un>me":    [       # Лена > Семён
                        [None, " "],
                        "*",
                        [None, " "]
                    ],
        "un>mi":    [       # Лена > Мику
                        [None, " "],
                        "*",
                        [None, " "]
                    ],
        "un>mz":    [       # Лена > Женя
                        [None, " "],
                        "*",
                        [None, " "]
                    ],
        "un>sh":    [       # Лена > Шурик
                        [None, " "],
                        "*",
                        [None, " "]
                    ],
        "un>sl":    [       # Лена > Славя
                        [None, " "],
                        "*",
                        [None, " "]
                    ],
        "un>us":    [       # Лена > Ульяна
                        [None, "Лена сама до конца, видимо, ещё не поверила, что победила."],
                        [un, "Я что, я…"],
                        "*",
                        [us, "Аааа, Ленка-пенка-колбаса, вредная сосиска!"],
                        [None, "Ульяна хотела было добавить ещё что-то, но подоспевшая вожатая оттащила её в сторону."]
                    ],
# ------------------------------------------- Ульяна
        "us>dv":    [       # Ульяна > Алиса
                        [None, " "],
                        "*",
                        [None, " "]
                    ],
        "us>me":    [       # Ульяна > Семён
                        [None, " "],
                        "*",
                        [None, " "]
                    ],
        "us>mi":    [       # Ульяна > Мику
                        [None, " "],
                        "*",
                        [None, " "]
                    ],
        "us>mz":    [       # Ульяна > Женя
                        [None, " "],
                        "*",
                        [None, " "]
                    ],
        "us>sh":    [       # Ульяна > Шурик
                        [None, "Победив, Ульяна повела себя предсказуемо."],
                        [us, "И так будет с каждым!"],
                        "*",
                        [sh, "И тебе спасибо."],
                        [None, "Поднявшись, Шурик отошёл в сторону."]
                    ],
        "us>sl":    [       # Ульяна > Славя
                        [None, " "],
                        "*",
                        [None, " "]
                    ],
        "us>un":    [       # Ульяна > Лена
                        [None, " "],
                        "*",
                        [None, " "]
                    ]
        }

# ===============================================================================================
# ДЛЯ ИГРОКОВ — ПОБЕДИТЕЛЕЙ 1 тура
# отсортировано по условному номеру игрока
#      МОЖНО добавить варианты — с дальнейшим рандомным выбором
#  (фразы в основном авторские, есть и отсебятина, для проверки алгоритма, нужна корректировка по контексту)
# структура: [кто говорит (или None  — если "от автора"), что говорит]
# если несколько строк — и выводиться будет в несколько строк
# ПЛОХИЕ НОВОСТИ — внутритекстовые теги работать не будут.
# -----------------------------------------------------------------------------------------------
    alt_table_gamblers_winner_1_tour = {
       "me":   [           # Сёма
                    [None, "Я направляюсь к победе."]
                ],
        "un":   [           # Лена
                    [None, "Ей пришлось потрудиться, но победа оказалась за ней."]
                ],
        "sl":   [           # Славя
                    [None, "Активистка, похоже, не поняла, что произошло, но покорно пересела за стол полуфиналистов."]
                ],
        "dv":   [           # Алиса
                    [None, "Она раскатала противника с разгромным счётом — кажется, наслаждалась игрой."]
                ],
        "mi":   [           # Мику
                    [None, "Да уж, талантливый человек талантлив во всём."]
                ],
        "us":   [           # Ульяна
                    [None, "Мелкая и не думала учить правила игры."],
                    [None, "Вместо этого она явно прибегла к какому-то жульничеству."]
                ],
        "sh":   [           # Шурик
                    [None, "Честно сказать, не удивлён. У него были все шансы."]
                ],
        "mz":   [           # Женя
                    [None, "Она с неудовольствием скривилась, кажется, поняла, что победа значит ещё и дальнейшее участие в этой дурацкой игре."]
                ]
    }

# ===============================================================================================
# ДЛЯ ИГРОКОВ — ПОБЕДИТЕЛЕЙ ПОЛУФИНАЛА
# отсортировано по условному номеру игрока
#      МОЖНО добавить варианты — с дальнейшим рандомным выбором
#  (фразы в основном авторские, есть и отсебятина, для проверки алгоритма, нужна корректировка по контексту)
# структура: [кто говорит (или None  — если "от автора"), что говорит]
# если несколько строк — и выводиться будет в несколько строк
# ПЛОХИЕ НОВОСТИ — внутритекстовые теги работать не будут.
# -----------------------------------------------------------------------------------------------
    alt_table_gamblers_winner_semifinal = {
        "me":   [           # Сёма
                    [None, "Я прохожу в финал."]
                ],
        "un":   [           # Лена
                    [None, "Вот уже вторую игру подряд она сидит с потерянным видом, но ей достаются всё более сильные комбинации. Не подыгрывает ли ей крупье?"]
                ],
        "sl":   [           # Славя
                    [None, "Девушка ворчала и пожимала плечами, не особо желая продолжать игру, кажется, она и присоединиться-то решила из одного лишь чувства товарищества."]
                ],
        "dv":   [           # Алиса
                    [None, "Рыжая пёрла бульдозером, не задерживаясь ни на одном из оппонентов — её целью был финал, и никак иначе!"]
                ],
        "mi":   [           # Мику
                    [None, "Она радовалась каждой удачной карте как маленький ребёнок, а когда вскрылись и сверили комбинации — то от радости завизжала и полезла было на стол петь, но была вовремя удалена оттуда бдительной вожатой."]
                ],
        "us":   [           # Ульяна
                    [None, "Мелкая сегодня в ударе."],
                    [None, "Вторая игра подряд без знания правил — практически как вождение автомобиля без рук."]
                ],
        "sh":   [           # Шурик
                    [None, "Он не показывал особого интереса. Быть может, в этом и был его секрет?"]
                ],
        "mz":   [           # Женя
                    [None, "Меня откровенно забавляло то, что она-то как раз меньше всего хотела играть."],
                    [None, "А ушла так далеко."]
                ]
    }

# ===============================================================================================
# ДЛЯ ИГРОКОВ — ПОБЕДИТЕЛЕЙ ФИНАЛА
# отсортировано по условному номеру игрока
#      МОЖНО добавить варианты — с дальнейшим рандомным выбором
#  (заготовка словаря, фразы можно дописать по аналогии с 1 туром и 1\2)
# структура: [кто говорит (или None  — если "от автора"), что говорит]
# если несколько строк — и выводиться будет в несколько строк
# Если [None, None] или [None, " "] — обработчик не выведет ничего
# ПЛОХИЕ НОВОСТИ — внутритекстовые теги работать не будут.
# -----------------------------------------------------------------------------------------------
    alt_table_gamblers_winner_final = {
        "me":   [           # Сёма
                    [None, "(Реакция Семёна на победу в финале, например:)"],
                    [me, "(Естественно, я обыграл всех NPC; кто-то думал, что будет иначе?)"]
                ],
        "un":   [           # Лена
                    [None, "(Реакция Лены на победу в финале.)"]
                ],
        "sl":   [           # Славя
                    [None, "(Реакция Слави на победу в финале.)"]
                ],
        "dv":   [           # Алиса
                    [None, "(Реакция Алисы на победу в финале.)"]
                ],
        "mi":   [           # Мику
                    [None, "(Реакция Мику на победу в финале.)"]
                ],
        "us":   [           # Ульяна
                    [None, "(Реакция Ульяны на победу в финале.)"]
                ],
        "sh":   [           # Шурик
                    [None, "(Реакция Шурика на победу в финале.)"]
                ],
        "mz":   [           # Женя
                    [None, "(Реакция Жени на победу в финале.)"]
                ]
    }

# ===============================================================================================
# ДЛЯ ИГРОКОВ — ПРОИГРАВШИХ в 1 туре
# отсортировано по условному номеру игрока
#             МОЖНО добавить варианты — с дальнейшим рандомным выбором
#  (фразы в основном авторские, есть и отсебятина, для проверки алгоритма, нужна корректировка по контексту)
# структура: [кто говорит (или None  — если "от автора"), что говорит]
# если несколько строк — и выводиться будет в несколько строк
# ПЛОХИЕ НОВОСТИ — внутритекстовые теги работать не будут.
# -----------------------------------------------------------------------------------------------
    alt_table_gamblers_loser_1_tour = {
        "me":   [           # Сёма
                    [None, "Я остаюсь в первом коне."],
                    [None, "Побуду болельщиком; что мне ещё остаётся?"]
                ],
        "un":   [           # Лена
                    [None, "Лена тихо поднялась и присоединилась к болельщикам."]
                ],
        "sl":   [           # Славя
                    [None, "Славя пожала плечами и поднялась — кажется, она куда-то торопилась."]
                ],
        "dv":   [           # Алиса
                    [None, "Увидеть лицо Двачевской, терпящей поражение — бесценно!"],
                    [None, "Я расхохотался, прикрываясь рукой, но она, похоже, услышала — обожгла взглядом."]
                ],
        "mi":   [           # Мику
                    [None, "Мику поднялась, помахала всем и встала к болельщикам."],
                    [None, "Она была чем-то очень довольная."]
                ],
        "us":   [           # Ульяна
                    [None, "Ульяна надулась, закричала что-то и пробовала было топать ногами, но Ольга Дмитриевна быстро успокоила её."],
                    [None, "Понурившись, мелкая побрела прочь из столовой."]
                ],
        "sh":   [           # Шурик
                    [None, "Шурик среагировал так, как я и ожидал — поправил очки, резким движением отбросил чёлку со лба и встал."],
                    [None, "Коротко наклонил голову и занял своё место в толпе."]
                ],
        "mz":   [           # Женя
                    [None, "С видом величайшего облегчения Женя бросила карты на стол и, встав, направилась на улицу."]
                ]
    }

# ===============================================================================================
# ДЛЯ ИГРОКОВ — ПРОИГРАВШИХ в ПОЛУФИНАЛЕ
# отсортировано по условному номеру игрока
#             МОЖНО добавить варианты — с дальнейшим рандомным выбором
#  (фразы в основном авторские, есть и отсебятина, для проверки алгоритма, нужна корректировка по контексту)
# структура: [кто говорит (или None  — если "от автора"), что говорит]
# если несколько строк — и выводиться будет в несколько строк
# ПЛОХИЕ НОВОСТИ — внутритекстовые теги работать не будут.
# -----------------------------------------------------------------------------------------------
    alt_table_gamblers_loser_semifinal = {
        "me":   [           # Сёма
                    [None, "А я продул. Что тут ещё скажешь?"]
                ],
        "un":   [           # Лена
                    [None, "Лена тихо поднялась и присоединилась к болельщикам."]
                ],
        "sl":   [           # Славя
                    [None, "Славя замученно улыбнулась и с огромным облегчением отодвинула карты."],
                    [sl, "Всё, наигралась на год вперёд."],
                    [None, "Она поднялась и пошла к ждущей её Ольге Дмитриевне."]
                ],
        "dv":   [           # Алиса
                    [None, "Алиса долго не хотела верить в то, что проиграла."],
                    [None, "Она даже пыталась заставить судью назначить переигровку — безрезультатно."],
                    [None, "Она встала из-за стола, цедя непечатное."]
                ],
        "mi":   [           # Мику
                    [None, "Мику посмотрела на свои карты ещё раз, видимо, пытаясь запомнить получше."],
                    [None, "А может, она так и не усвоила правил игры."],
                    [None, "Я бы не удивился."]
                ],
        "us":   [           # Ульяна
                    [us, "Эй, вы все неправильно играли! Вы все жулики, жулики!"],
                    [None, "Кричала она, отбиваясь."],
                    [None, "Минут десять только ушло на то, чтобы немного успокоить её и привести в чувство."],
                    [None, "Она топнула ногой и выбежала из зала."]
                ],
        "sh":   [           # Шурик
                    [None, "Шурик кивнул и поднялся из-за стола."],
                    [None, "Кажется, у него проблемы с проявлением эмоций."]
                ],
        "mz":   [           # Женя
                    [None, "Давненько я не видел, чтобы так бурно радовались поражению."],
                    [None, "Женя разулыбалась, вздохнула, расправила плечи."],
                    [mz, "Ну наконец-то!"],
                    [None, "Рявкнула она и вышла вон из столовой."]
                ]
    }

# ===============================================================================================
# ДЛЯ ИГРОКОВ — ПРОИГРАВШИХ в ФИНАЛЕ
# отсортировано по условному номеру игрока
#             МОЖНО добавить варианты — с дальнейшим рандомным выбором
#  (заготовка словаря, фразы можно дописать по аналогии с 1 туром и 1\2)
# структура: [кто говорит (или None  — если "от автора"), что говорит]
# если несколько строк — и выводиться будет в несколько строк
# ПЛОХИЕ НОВОСТИ — внутритекстовые теги работать не будут.
# -----------------------------------------------------------------------------------------------
    alt_table_gamblers_loser_final = {
        "me":   [           # Сёма
                    [None, "(Реакция Семёна на поражение в финале, например:)"],
                    [me, "(Ну надо же, проиграл NPC. Ладно, не на последние штаны играли.)"]
                ],
        "un":   [           # Лена
                    [None, "(Реакция Лены на поражение в финале.)"]
                ],
        "sl":   [           # Славя
                    [None, "(Реакция Слави на поражение в финале.)"]
                ],
        "dv":   [           # Алиса
                    [None, "(Реакция Алисы на поражение в финале.)"]
                ],
        "mi":   [           # Мику
                    [None, "(Реакция Мику на поражение в финале.)"]
                ],
        "us":   [           # Ульяна
                    [None, "(Реакция Ульяны на поражение в финале.)"]
                ],
        "sh":   [           # Шурик
                    [None, "(Реакция Шурика на поражение в финале.)"]
                ],
        "mz":   [           # Женя
                    [None, "(Реакция Жени на поражение в финале.)"]
                ]
    }


# ===============================================================================================
# словарь склонений номеров столов, стола № 0 — нет, тут склоняем "стол"
# верхний полуфинал = 5, нижний полуфинал = 6, финал = 7
# ПОКА ВЫЗЫВАЮТСЯ НЕ ВСЕ — ЭТО ЦИФРЫ
    alt_table_name_cases = {                                                                                    # словарь склонений столов
        "i": ["стол","Первый","Второй","Третий","Последний","Первый полуфинальный","Второй полуфинальный","финал"],                     # именительный падеж
        "r": ["стола","Первого","Второго","Третьего","Последнего","1й 1/2","2й 1/2","финал"],               # родительный падеж
        "d": ["столу","Первому","Второму","Третьему","Последнему","1й 1/2","2й 1/2","финал"],               # дательный падеж
        "t": ["столом","За первым","За вторым","За третьим","За последним","За первым полуфинальным","За вторым полуфинальным","финал"],      # творительный падеж (винительного не надо)
        "p": ["столе","Первом","Втором","Третьем","Последнем","1й 1/2","2й 1/2","финал"]                    # предложный падеж
    }

# ===============================================================================================
# словарь суффиксов принадлежности столов
# ДОЛЖНО БЫТЬ НЕ МЕНЕЕ 4-х значений (максимум 4 стола в проходе, вызванный вариант далее не вызывается)
    alt_table_affiliation = {
        1:  ["заняли","i","i"],                 # если "заняли" = стол: именительный падеж, игроки: именительный падеж
        2:  ["принадлежал","i","d"],            # если "принадлежал" = стол: именительный падеж, игроки: дательный падеж
        3:  ["расположились","t","i"],          # если "расположились" = стол: творительный падеж, игроки: именительный падеж
        4:  ["встречаются","t","i"],            # если "встречаются" = стол: творительный падеж, игроки: именительный падеж
        5:  ["прочно оккупировали","i","i"]     # если "оккупировали" = стол: именительный падеж, игроки: именительный падеж
    }

# ===============================================================================================
# словарь суффиксов принадлежности столов — победители
# ДОЛЖНО БЫТЬ НЕ МЕНЕЕ 4-х значений (максимум 4 стола в проходе, вызванный вариант далее не вызывается)
    alt_table_winner = {
        1:  ["победа ушла","t","d"],                                        # если "победа ушла" = стол: творительный падеж, игроки: дательный падеж
        2:  ["принёс удачу","i","d"],                                       # если "принёс удачу" = стол: именительный падеж, игроки: дательный падеж
        3:  [", кажется, всё подыгрывало","t","d"],                         # если "всё подыгрывало" = стол: творительный падеж, игроки: дательный падеж
        4:  ["удача сегодня совершенно определённо улыбалась","t","d"]      # если "удача..улыбалась" = стол: творительный падеж, игроки: дательный падеж
    }

# ===============================================================================================
# словарь вывода проигравших
# ДОЛЖНО БЫТЬ НЕ МЕНЕЕ 4-х значений (максимум 4 стола в проходе, вызванный вариант далее не вызывается)
#внимание: нужно подумать над универсальными фразами, чтобы не было сочетаний "Проигравшая сторона постаралась отреагировать с достоинством." "Аааа, Ленка-пенка-колбаса, вредная сосиска!".
    alt_table_loser = {
        1:  "Проигравшая сторона постаралась отреагировать с достоинством.",
        2:  "Случайность, наверное.",
        3:  "Побеждённому оставалось лишь признать своё поражение.",
        4:  "Второму игроку повезло куда меньше."
    }



# ==============================================================================
#                               ФУНКЦИИ РАССАДКИ
#
# ==============================================================================

init 3 python:
# ----------------------------------------------------------------------------------------
# называем турнирный стол (по его номеру)
    def alt_declare_tournament_tables(table_no):
        global alt_day2_gamblers_1_tour
        global alt_day2_gamblers_semifinal
        global alt_tournament_state
        global alt_table_special_name
        global alt_table_mutual_taunt
        global alt_table_taunt_with_me
        global alt_table_taunt_gamblers
        global alt_table_name_cases
        global alt_table_affiliation
        global alt_random_box_1
        gamblers_tmp = alt_day2_gamblers_1_tour[0:8]                        # копируем список картежников 1 тура (с 0 по 8), рассаженных по столам, упражняемся с копией
        if alt_tournament_state == "1_round_start":                         # если начало 1 тура
            pass
        elif alt_tournament_state == "semifinal_start":                     # если начало полуфинала
            gamblers_tmp.extend(alt_day2_gamblers_semifinal)                # добавляем в конец список картежников полуфинала
        nicks = [gamblers_tmp[2*table_no-2].take, gamblers_tmp[2*table_no-1].take]              # получаем список ников
        nicks.sort()                                                                            # сортируем его по алфавиту
        combine_nicks = "+".join(nicks)                                                         # .. и комбинируем через +
        if combine_nicks in alt_table_special_name:                                                 # если для комбинации игроков предусмотрено специальное представление стола
            table_name = alt_table_name_cases[alt_table_special_name[combine_nicks][1]][table_no]       # склоняем номер стола
            table_title = alt_table_name_cases[alt_table_special_name[combine_nicks][1]][0]             # склоняем слово "стол"
            table_suffix = alt_table_special_name[combine_nicks][0]                                 # склоняем принадлежность стола
            gamblers_case = alt_table_special_name[combine_nicks][2]                                # получаем падеж для игроков
        else:                                                                                   # специального представления стола не предусмотрено
            tab_var = renpy.random.choice(alt_random_box_1)                                 # выбираем из количества оставшихся вариантов
            alt_random_box_1.remove(tab_var)                                                    # из списка вариантов удаляем использованный вариант
            table_name = alt_table_name_cases[alt_table_affiliation[tab_var][1]][table_no]              # склоняем номер стола
            table_title = alt_table_name_cases[alt_table_affiliation[tab_var][1]][0]                    # склоняем слово "стол"
            table_suffix =  alt_table_affiliation[tab_var][0]                                       # склоняем принадлежность стола
            gamblers_case = alt_table_affiliation[tab_var][2]                                       # получаем падеж для игроков
        table = " ".join([table_name,table_title,table_suffix])                  #собираем представление стола в массив .. и комбинируем через " "
        gambler_upper = gamblers_tmp[2*table_no-2].name[gamblers_case]              # получаем имя верхнего игрока в нужном падеже
        gambler_lover = gamblers_tmp[2*table_no-1].name[gamblers_case]              # получаем имя нижнего игрока в нужном падеже
        if combine_nicks in alt_table_mutual_taunt and alt_table_mutual_taunt[combine_nicks] != " ":    # если определен парный таунт
            taunt = alt_table_mutual_taunt[combine_nicks]                                               # ... его и покажем
        elif gamblers_tmp[2*table_no-2].take == 'me':                                       # если в паре первый игрок — Сёмен
            # показываем таунт второго игрока с Семеном (рандом 1/длина списка)
            taunt = alt_table_taunt_with_me[gamblers_tmp[2*table_no-1].take][renpy.random.randint(0,len(alt_table_taunt_with_me[gamblers_tmp[2*table_no-1].take])-1)]
        elif gamblers_tmp[2*table_no-1].take == 'me':                                       # если в паре второй игрок — Сёмен
            # показываем таунт первого игрока (рандом 1/длина списка)
            taunt = alt_table_taunt_with_me[gamblers_tmp[2*table_no-2].take][renpy.random.randint(0,len(alt_table_taunt_with_me[gamblers_tmp[2*table_no-2].take])-1)]
        else:                                                                                           # если нет особых условий
            # таунт второго игрока в списке (рандом 1/длина списка)
            taunt = alt_table_taunt_gamblers[gamblers_tmp[2*table_no-1].take][renpy.random.randint(0,len(alt_table_taunt_gamblers[gamblers_tmp[2*table_no-1].take])-1)]
        return table, gambler_upper, gambler_lover, taunt

# ----------------------------------------------------------------------------------------
# Проверяем, есть ли что в общем словаре
    def alt_whats_in_mutual_table_win_los(winner_take, loser_take):
        global alt_table_mutual_gamblers_win_los
        winner_sentence = loser_sentence = None                                 # считаем, для победителя и проигравшего совместных фраз нет
        combine_nicks = ">".join([winner_take, loser_take])                     # комбинируем ники через ">"
        if combine_nicks in alt_table_mutual_gamblers_win_los:                  # если есть такая комбинация  в словаре
            united_sentence = alt_table_mutual_gamblers_win_los[combine_nicks]  # загружаем список фраз по ключу
            if united_sentence.count("*") == 1:                                 # если найден только один разделитель "*"
                delimiter = united_sentence.index("*")                          # получаем позицию разделителя списка
                if delimiter != 0:                                              # если позиция разделителя не в начале списка
                    if len(united_sentence[0]) != 0:                            # если первая фраза не пустая
                        if united_sentence[0][1] not in [None, " "]:            # если собственно фраза не пустая
                            winner_sentence = united_sentence[0:delimiter]      # получаем список фраз победителя
                if delimiter !=  united_sentence[-1]:                           # если позиция разделителя не в конце списка
                    if len(united_sentence[delimiter+1]) != 0:                  # если первая фраза после разделителя не пустая
                        if united_sentence[delimiter+1][1] not in [None, " "]:  # если собственно фраза не пустая
                            loser_sentence = united_sentence[delimiter+1:len(united_sentence)]      # получаем список фраз проигравшего
        return winner_sentence, loser_sentence

# ----------------------------------------------------------------------------------------
# подводим итоги стола (по его номеру, список игроков)
    def alt_declare_results_tables(table_no, gamblers):
        global alt_table_name_cases
        global alt_table_gamblers_winner_1_tour
        global alt_table_gamblers_loser_1_tour
        global alt_table_gamblers_winner_semifinal
        global alt_table_gamblers_loser_semifinal
        global alt_table_winner
        global alt_table_loser
        global alt_random_box_1
        global alt_random_box_2
        tab_var = renpy.random.choice(alt_random_box_1)                                     # выбираем из количества оставшихся вариантов
        alt_random_box_1.remove(tab_var)                                                    # из списка вариантов удаляем использованный вариант
        table_name = alt_table_name_cases[alt_table_winner[tab_var][1]][table_no]                     # склоняем номер стола
        table_title = alt_table_name_cases[alt_table_winner[tab_var][1]][0]                    # склоняем слово "стол"
        table_suffix =  alt_table_winner[tab_var][0]                                       # склоняем принадлежность стола
        winner_case = alt_table_winner[tab_var][2]                                       # получаем падеж для победителя
        table = " ".join([table_name,table_title,table_suffix])                         # собираем представление стола в массив .. и комбинируем через " "
        if table_no <= 4:                                                       # если № стола 1..4
            m = table_no                                                        # указатель — по номеру стола
        else:
            m = table_no - 4                                                    # указатель = номер стола — 4
        gambler_winner = gamblers[2*m-2].name[winner_case]                      # получаем имя победителя в нужном падеже
        winner_take = gamblers[2*m-2].take                                      # получаем ник победителя
        loser_take = gamblers[2*m-1].take                                       # получаем ник проигравшего
        winner_sentence, loser_sentence = alt_whats_in_mutual_table_win_los(winner_take, loser_take) # проверяем. есть ли что в общем словаре, если есть — вытаскиваем фразы оттуда
        if winner_sentence != None:                                             # если разыскали что-то в общем словаре для победителя
            winner_remark = winner_sentence[:]                                  # фразы победителей берём из общего словаря
        else:
            if table_no <= 4:                                                   # если № стола 1..4
                w = alt_table_gamblers_winner_1_tour                            # фразы победителей — по словарю 1 тура
            else:
                w = alt_table_gamblers_winner_semifinal                         # фразы победителей — по словарю полуфинала
            j = len(w[winner_take])                                             # получаем количество фраз
            winner_remark = []                                                  # ремарка победителя
            for i in range (0,j):                                               # читаем строки из словаря победителей
                winner_remark.append(w[winner_take][i])                         # добавляем в список очередную фразу
        if loser_sentence != None:                                              # если в совместном блоке для проигравшего что-то есть
            loser_remark = loser_sentence[:]                                    # фразы проигравших берём из общего словаря
        else:
            if table_no <= 4:                                                   # если № стола 1..4
                l = alt_table_gamblers_loser_1_tour                             # фразы проигравших — по словарю 1 тура
            else:                                                               # если № стола 5 и выше
                l = alt_table_gamblers_loser_semifinal                          # фразы проигравших — по словарю полуфинала
            j = len(l[loser_take])                                              # получаем количество фраз
            loser_remark = []                                                   # ремарка проигравшего
            for i in range (0,j):                                               # читаем строки из словаря проигравших
                loser_remark.append(l[loser_take][i])                           # добавляем в список очередную фразу
        tab_var = renpy.random.choice(alt_random_box_2)                                     # выбираем из количества оставшихся вариантов
        alt_random_box_2.remove(tab_var)                                                    # из списка вариантов удаляем использованный вариант
        loser_preface = alt_table_loser[tab_var]                                            # рандомный выбор "реакция проигравшего"
        return table, gambler_winner, winner_remark, loser_preface, loser_remark

# ----------------------------------------------------------------------------------------
# подводим итоги финала (победитель, проигравший)
    def alt_declare_results_final(winner_take, loser_take):
        global alt_table_gamblers_winner_final
        global alt_table_gamblers_loser_final
        winner_sentence, loser_sentence = alt_whats_in_mutual_table_win_los(winner_take, loser_take) # проверяем. есть ли что в общем словаре, если есть — вытаскиваем фразы оттуда
        if winner_sentence != None:                                             # если разыскали что-то в общем словаре для победителя
            winner_remark = winner_sentence[:]                                  # фразы победителей берём из общего словаря
        else:
            w = alt_table_gamblers_winner_final                             # фразы победителей — по словарю финала
            j = len(w[winner_take])                                                 # получаем количество фраз
            winner_remark = []                                                      # ремарка победителя
            for i in range (0,j):                                                   # читаем строки из словаря победителей
                winner_remark.append(w[winner_take][i])                             # добавляем в список очередную фразу
        if loser_sentence != None:                                             # если разыскали что-то в общем словаре для проигравшего
            loser_remark = loser_sentence[:]                                   # фразы победителей берём из общего словаря
        else:
            l = alt_table_gamblers_loser_final                              # фразы проигравших — по словарю финала
            j = len(l[loser_take])
            loser_remark = []
            for i in range (0,j):
                loser_remark.append(l[loser_take][i])
        return winner_remark, loser_remark

# ----------------------------------------------------------------------------------------
# тащим картинку картёжника
    def alt_get_img_playon(gamblers):
        prefix  = "scenario_alt/Pics/gui/tournament/"
        suffix = "_playon.png"
        return prefix+gamblers+suffix

# ----------------------------------------------------------------------------------------
# создаём игроков
    def alt_set_gamblers():
        gamblers = []                                       # Картежники: (ники) 0:Семён, 1:Лена, 2:Славя, 3:Алиса, 4:Мику, 5:Ульянка, 6:Шурик, 7:Женя
        nick_of_gamblers = [me,un,sl,dv,mi,us,sh,mz]                                                            # ХАРАКТЕРЫ
        take_of_gamblers = ['me','un','sl','dv','mi','us','sh','mz']                                            # ники (текст)
    # Склоняем картежников (имена):
        #name_me = [u'я',u'меня',u'мне',u'меня',u'мной',u'мне']                                                  # имена Семёна (именительный..предложный)
        name_me = [u'ваш покорный слуга','вашего покорного слуги','вашему покорному слуге','вашего покорного слугу','вашим покорным слугой','вашем покорном слуге']
        name_un = [u'Лена',u'Лены',u'Лене',u'Лену',u'Леной',u'Лене']                                            # имена Лены (именительный..предложный)
        name_sl = [u'Славя',u'Слави',u'Славе',u'Славю',u'Славей',u'Славе']                                      # имена Слави (именительный..предложный)
        name_dv = [u'Алиса',u'Алисы',u'Алисе',u'Алису',u'Алисой',u'Алисе']                                      # имена Алисы (именительный..предложный)
        name_mi = [u'Мику']*6                                                                                   # имена Мику (именительный..предложный) = одинаковые, но пусть так
        name_us = [u'Ульянка',u'Ульянки',u'Ульянке',u'Ульянку',u'Ульянкой',u'Ульянке']                          # имена Ульянки (именительный..предложный)
        name_sh = [u'Шурик',u'Шурика',u'Шурику',u'Шурика',u'Шуриком',u'Шурике']                                 # имена Шурика (именительный..предложный)
        name_mz = [u'Женя',u'Жени',u'Жене',u'Женю',u'Женей',u'Жене']                                            # имена Жени (именительный..предложный)
        name_of_gamblers = [name_me,name_un,name_sl,name_dv,name_mi,name_us,name_sh,name_mz]                    # список списков имен картежников
        cases = ['i','r','d','v','t','p']                                              # Список используемых падежей:
    # Создаем картежников
        for i in range (0,8):                                                           # для 8 картежников (номер элемента списка = номер картежника)
            gambler = []                                                                # очередной картежник
            gambler.nick = nick_of_gamblers[i]                                          # ник картежника (ХАРАКТЕР)
            gambler.take = take_of_gamblers[i]                                          # ник картежника (текст)
            gambler.name = {}                                                           # имя картёжника (словарь падежей) — пустой
            for j in range (0,6):                                                       # перебираем падежи
                gambler.name[cases[j]] = name_of_gamblers[i][j]                         # имя картежника = словарь "падеж":"имя в падеже"
            gambler.face = alt_get_img_playon(gambler.take)                             # иконка игрока в турнире, путь к файлу
            gambler.image = gambler.take+"_playon"                                      # иконка игрока в турнире, псевдоним
            gambler.place = None                                                        # № места игрока
            gambler.place_xy = None                                                     # координаты места игрока [x,y]
            gambler.table = None                                                        # № стола игрока
            gambler.winner = False                                                      # Игрок победил
            gamblers.append(gambler)                                                    # добавляем очередного картёжника в список
        return gamblers                                                                 # функция возвращает список картежников

# ----------------------------------------------------------------------------------------
# округляем пару чисел мест — для № стола
    def alt_round_up(x):
        y = int(round((x+1.5)/2))                                                       # 1,5 добавляем из-за особенностей округления питона
        return y

# ----------------------------------------------------------------------------------------
# рассаживаем  картёжников по столам (начальный расклад) — ВЫЗЫВАЕТСЯ ОДИН РАЗ
    def alt_gamblers_shuffler():
        global alt_winners_1_tour
        global alt_losers_1_tour
        places_1_round = range(8)                                                       # список мест в 1 раунде — для рандома
    # первоначальная рассадка (снизу вверх) 0-3 слева, 4-7 справа
        x_gamblers_1_round = [459,1315]                                                 # координаты x начальных мест рассадки (слева, справа)
        y_gamblers_1_round = [157,312,620,775]                                          # координаты y начальных мест рассадки (сверху вниз)
        places_gamblers_1_round = []                                                    # места первоначальной рассадки
    # полуфинал места 8-9-10-11
        x_gamblers_semifinal = [648,1135]                                               # координаты x полуфинала (слева, справа)
        y_gamblers_semifinal = [235,698]                                                # координаты y полуфинала (сверху вниз)
        places_gamblers_semifinal = []                                                  # места полуфинала (0-3), добавляем 8
    # финал места 12-13
        places_gamblers_final = [[888,358],[888,573]]*2                                 # места финала, 1-3 стол — верхнее, 2-4 стол — нижнее
        for i in range (0,2):                                                           # запускаем цикл в цикле по x, y
            for j in range (0,4):
                places_gamblers_1_round.append([x_gamblers_1_round[i],y_gamblers_1_round[j]]) # очередному месту присваиваем координаты
        for i in range (0,2):                                                           # запускаем цикл в цикле по x, y
            for j in range (0,2):
                places_gamblers_semifinal.append([x_gamblers_semifinal[i],y_gamblers_semifinal[j]]) # очередному месту присваиваем координаты
        gamblers = alt_set_gamblers()                                                   # формируем список игроков (ссылка)
        k = 0                                                                           # Счетчик циклов рандома
        while k<8:                                                                      # Пока счетчик < 8 (места с 0 по 7)
            place = renpy.random.choice(places_1_round)                                 # Место = случайное из списка оставшихся мест
            gamblers[k].place = place                                                   # Даём игроку место
            gamblers[k].place_xy = places_gamblers_1_round[place]                       # Даём игроку координаты места
            gamblers[k].table = alt_round_up(place)                                     # № стола = округлвверх (№ места)
            gamblers[k].place_sm_xy = places_gamblers_semifinal[gamblers[k].table-1]    # Даём игроку координаты места в полуфинале
            gamblers[k].place_f_xy = places_gamblers_final[gamblers[k].table-1]         # Даём игроку координаты места в финале
            gamblers[k].place_w_xy = [1049,458]                                         # координаты победителя турнира 1051.460
            gamblers[k].winner = False                                                  # сбрасываем флаг победителя
            places_1_round.remove(place)                                                # из списка мест удаляем присвоенное место
            k += 1                                                                      # увеличиваем счетчик на 1
        alt_winners_1_tour = []                                                           # Победители  1 тура — очищаем
        alt_losers_1_tour = []                                                            # Проигравшие в 1 туре — очищаем
        return gamblers                                                                 # функция возвращает список картежников, "рассаженных" по столам

# ----------------------------------------------------------------------------------------
# узнаём своего соперника
    def alt_get_me_rival(gamblers):
        gamblers_tmp = gamblers[:]                                                      # копируем сет игроков, упражняемся с ним, не трогаем основной
        for i in range (0,len(gamblers_tmp)):                                           # перебираем игроков
            if gamblers_tmp[i].take == 'me':                                            # если очередной игрок — Семён
                table = gamblers_tmp[i].table                                           # узнаём номер своего стола
                del gamblers_tmp[i]                                                     # удаляем себя из списка
                break                                                                   # на этом цикл заканчиваем
        for i in range (0,len(gamblers_tmp)):                                           # перебираем оставшихся
            if gamblers_tmp[i].table == table:                                          # если № стола очередного игрока совпадает с моим
                rival = gamblers_tmp[i]                                                 # он и есть мой соперник
                break                                                                   # на этом цикл заканчиваем
        return rival                                                                    # функция возвращает моего соперника

# ----------------------------------------------------------------------------------------
# узнаём второго соперника в финале
    def alt_get_me_rival_final(gamblers,gambler):
        gamblers_tmp = gamblers[:]                                                      # копируем сет игроков, упражняемся с ним, не трогаем основной
        for i in range (0,len(gamblers_tmp)):                                           # перебираем игроков
            if gamblers_tmp[i].take != gambler.take:                                    # если очередной игрок не Семён или его победитель в 1/2
                rival = gamblers_tmp[i]                                                 # он и есть второй соперник
                index = i                                                               # .. и индекс соперника в списке
        return rival, index                                                             # функция возвращает второго соперника

# ----------------------------------------------------------------------------------------
# Получаем номер места игрока для сортировки
    def alt_sort_gamblers_by_place(x):
        return x.place

# ----------------------------------------------------------------------------------------
# упорядочиваем игроков по номерам мест
    def alt_gamblers_arrange(gamblers):
        gamblers_tmp = gamblers[:]                                                      # копируем сет игроков, упражняемся с ним, не трогаем основной
        gamblers_tmp.sort(cmp,alt_sort_gamblers_by_place)                               # сортируем список по номеру мест (от 0 до 7)
        return gamblers_tmp

# ----------------------------------------------------------------------------------------
# узнаём своё место
    def alt_get_my_table(gamblers):
        for i in range(1,9):                                                            # перебираем столы — все (1-4 начало, 5-6 полуфинал)
            if gamblers[2*i-2].take == 'me':                                            # если в паре первый игрок — Сёмен
                table = gamblers[2*i-2].table                                           # номер стола
                places = [2*i-2, 2*i-1, table]                                          # места Семёна и соперника, № стола
                break                                                                   # на этом цикл заканчиваем
            elif gamblers[2*i-1].take == 'me':                                          # если в паре второй игрок — Сёмен
                table = gamblers[2*i-1].table                                           # номер стола
                places = [2*i-1, 2*i-2, table]                                          # места Семёна и соперника, № стола
                break                                                                   # на этом цикл заканчиваем
        return places

# ----------------------------------------------------------------------------------------
# где там Алиса после первого кона ?
    def alt_get_result_dv(gamblers):
        me_table = dv_table_los = dv_table_win = 0                                      # столы = 0
        result = 0                                                                      # результат = 0 (мы продули ДваЧе)
        for i in range(0,8):                                                            # переберем игроков
            if gamblers[i].take == "me":                                                # если очередной игрок — Семён
                if gamblers[i].winner == False:                                         # и он — проигравший
                    break                                                               # на том анализ заканчиваем
                else:                                                                   # а вот если выиграл
                    me_table = gamblers[i].table                                        # получаем стол Семёна
                    continue                                                            # следующий игрок
            elif gamblers[i].take == "dv":                                              # если очередной игрок — Алиса
                if gamblers[i].winner == False:                                         # и она — проиграла
                    dv_table_los = gamblers[i].table                                    # получаем стол Алисы — проигравшей
                    continue                                                            # следующий игрок
                else:                                                                   # Если Алиса победила
                    dv_table_win = gamblers[i].table                                    # получаем стол Алисы — победившей
        else:                                                                           # если Семён не проиграл
            if me_table == dv_table_los:                                                # и номера столов Семёна и Алисы-проигравшей совпали
                result = 1                                                              # Дваче продула именно Семёну
            elif me_table != dv_table_los and dv_table_los != 0:                        # Если номера столов Семёна и Алисы-проигравшей НЕ совпали, и стол Алисы не 0
                result = 2                                                              # Дваче продула в 1 туре, но не Семёну
            if dv_table_win !=0:                                                        # Дваче кого-то таки нагнула
                if me_table == dv_table_win:                                            # Если номера столов одинаковые
                    result = 3                                                          # Сёма и Алиса в одном полуфинале
                else:
                    result = 4                                                          # Сёма и Алиса в разных полуфиналах
        return result

# ----------------------------------------------------------------------------------------
# показываем турнирную таблицу перед первым раундом (игроки)
    def alt_show_tournament_table_1_round(gamblers):
        global alt_mstt
        background = 'bg int_dining_hall_sunset'
        table = 'alt_tournament_bg'
        if alt_mstt == 9:
            renpy.scene('underlay')
            renpy.scene('master')
            renpy.show(background,layer='underlay')                                 # показываем подоснову
            renpy.show(table,layer='underlay')                                      #показываем турнирную таблицу
            renpy.transition(dissolve,layer='underlay')
            return
        elif alt_mstt < 9:
            j = alt_mstt                                                            # локальный счетчик — по глобальному
            ui.layer('underlay')
            while j < 8:                                                            # пока счетчик меньше 8
                for i in range(0,j+1):                                              # пока счетчик изображений в диапазоне 0 — очередной игрок
                    ui.image(gamblers[i].face,xpos=gamblers[i].place_xy[0],ypos=gamblers[i].place_xy[1])    # показываем очередную картинку (от 1 до всех)
                    renpy.transition(diam,layer='underlay')
                j +=1                                                               # увеличиваем счётчик
                ui.close()                                                          # закрываем слой
                alt_mstt = j                                                        # глобальный счетчик — по локальному
                if alt_mstt >= 8:                                                   # если счетчик добрался до 8 (показали всех)
                    alt_mstt = 0                                                    # обнуляем счетчик
                return                                                              # возвращаемся

# ----------------------------------------------------------------------------------------
# показываем турнирную таблицу после 1 раунда и перед полуфиналом (игроки)
    def alt_show_tournament_table_semifinal(gamblers,gamblers_2 = None):
        global alt_mstt
        global alt_table_no
        global alt_winners_1_tour
        global alt_losers_1_tour
        global alt_day2_gamblers_semifinal
        background = 'bg int_dining_hall_sunset'
        table = 'alt_tournament_bg'
        if (alt_table_no == 0) or ((alt_table_no == 5) and (alt_mstt == 8)):
            renpy.scene('underlay')
            renpy.scene('master')
            renpy.show(background,layer='underlay')                                 # показываем подоснову
            ui.layer('underlay')                                                    # выводим монохромные картинки 1 тура
            ui.image(ImageReference(table))                                         # показываем турнирную таблицу
            for i in range(0,8):
                gray = im.MatrixColor(gamblers[i].face, im.matrix.brightness(-0.1)*im.matrix.saturation(0.05))
                alpha = im.Alpha(gray, 0.7)
                ui.imagebutton(gray, gray, clicked=None, xpos=gamblers[i].place_xy[0], ypos=gamblers[i].place_xy[1])
            if (alt_table_no == 5) and (alt_mstt == 8):
                for j in range(0,4):
                    color =  im.MatrixColor(gamblers_2[j].face,im.matrix.brightness(-0.1)*im.matrix.saturation(0.9))
                    ui.imagebutton(color, color, clicked=None, xpos=gamblers_2[j].place_sm_xy[0], ypos=gamblers_2[j].place_sm_xy[1])
                    alt_day2_gamblers_semifinal[j].winner = False
            ui.close()                                                              # закрываем слой
            if alt_table_no == 0:
                alt_winners_1_tour = []                                         # очищаем победителей 1 тура
                alt_losers_1_tour =[]                                           # очищаем проигравших 1 тура
                for i in range(0,8):
                    renpy.show(gamblers[i].image, at_list=[Transform(xpos=gamblers[i].place_xy[0],ypos=gamblers[i].place_xy[1],xanchor=0,yanchor=0)], layer='underlay')
                    if gamblers[i].winner == True:
                        alt_winners_1_tour.append(gamblers[i])
                    else:
                        alt_losers_1_tour.append(gamblers[i])
                for j in range(0,4):
                    gamblers[2*j:2*j+1] = [alt_winners_1_tour[j],alt_losers_1_tour[j]]
                alt_day2_gamblers_semifinal = alt_winners_1_tour[:]                     # полуфиналисты — копия победителей 1 тура
                temp = alt_day2_gamblers_semifinal.pop(2)                               # меняем местами 1 и 2 элементы
                alt_day2_gamblers_semifinal.insert(1,temp)                              #
                for k in range(0,4):                                                    # перебираем игроков
                    alt_day2_gamblers_semifinal[k].place = k+8                          # присваиваем новое место (с 8-го)
                    alt_day2_gamblers_semifinal[k].table = alt_round_up(k+8)            # присваиваем новый номер стола (5, 6)
                    alt_table_no = 1
            return
        elif alt_table_no < 5:
            j = alt_mstt                                                # локальный счетчик — по глобальному
            while j < 8:                                                # пока счетчик меньше 8
                if gamblers[j].winner == True:
                    x1 = gamblers[j].place_xy[0]
                    y1 = gamblers[j].place_xy[1]
                    x2 = gamblers[j].place_sm_xy[0]
                    y2 = gamblers[j].place_sm_xy[1]
                    renpy.hide(gamblers[j].image, layer='underlay')
                    renpy.show(gamblers[j].image, at_list=[Move((x1,y1), (x2,y2), 1.5)], layer='underlay')
                else:
                    renpy.transition(wipedown2, layer='underlay')
                    renpy.hide(gamblers[j].image, layer='underlay')
                j +=1                                                   # увеличиваем счётчик
                alt_mstt = j
                return
        elif (alt_table_no >= 5) and (alt_mstt < 5):
            j = alt_mstt                                                # локальный счетчик — по глобальному
            while j < 4:                                                # пока счетчик меньше 4
                renpy.show(gamblers_2[j].image, at_list=[Transform(xpos=gamblers_2[j].place_sm_xy[0],ypos=gamblers_2[j].place_sm_xy[1],xanchor=0,yanchor=0)], layer='underlay')
                renpy.transition(diam, layer='underlay')
                j +=1                                                   # увеличиваем счётчик
                alt_mstt = j
                return

# ----------------------------------------------------------------------------------------
# показываем турнирную таблицу после полуфинала (игроки)
    def alt_show_tournament_table_final(gamblers,gamblers_2 = None):
        global alt_mstt
        global alt_table_no
        global alt_day2_gamblers_1_tour
        global alt_winners_semifinal
        global alt_losers_semifinal
        global alt_day2_gamblers_final
        background = 'bg int_dining_hall_sunset'
        table = 'alt_tournament_bg'
        if alt_table_no == 4:
            gamblers_0 = alt_day2_gamblers_1_tour[:]
            renpy.scene('underlay')
            renpy.scene('master')
            renpy.show(background,layer='underlay')                                 # показываем подоснову
            ui.layer('underlay')                                                    # выводим монохромные картинки 1 тура
            ui.image(ImageReference(table))                                         # показываем турнирную таблицу
            for i in range(0,8):                                                                                      # вывели первый тур
                gray = im.MatrixColor(gamblers_0[i].face, im.matrix.brightness(-0.1)*im.matrix.saturation(0.05))
                ui.imagebutton(gray, gray, clicked=None, xpos=gamblers_0[i].place_xy[0], ypos=gamblers_0[i].place_xy[1])
            for j in range(0,4):
                gray = im.MatrixColor(gamblers[j].face, im.matrix.brightness(-0.1)*im.matrix.saturation(0.05))
                ui.imagebutton(gray, gray, clicked=None, xpos=gamblers[j].place_sm_xy[0], ypos=gamblers[j].place_sm_xy[1])
            ui.close()
            alt_winners_semifinal = []
            alt_losers_semifinal =[]
            for k in range(0,4):
                renpy.show(gamblers[k].image, at_list=[Transform(xpos=gamblers[k].place_sm_xy[0],ypos=gamblers[k].place_sm_xy[1],xanchor=0,yanchor=0)], layer='underlay')
                if gamblers[k].winner == True:
                    alt_winners_semifinal.append(gamblers[k])
                else:
                    alt_losers_semifinal.append(gamblers[k])
            for f in range(0,2):
                gamblers[2*f:2*f+1] = [alt_winners_semifinal[f],alt_losers_semifinal[f]]
            alt_day2_gamblers_final = alt_winners_semifinal[:]
            alt_table_no = 5
            return
        elif alt_table_no > 4:
            j = alt_mstt                                                # локальный счетчик — по глобальному
            while j < 4:                                                # пока счетчик меньше 4
                if gamblers[j].winner == True:
                    x1 = gamblers[j].place_sm_xy[0]
                    y1 = gamblers[j].place_sm_xy[1]
                    x2 = gamblers[j].place_f_xy[0]
                    y2 = gamblers[j].place_f_xy[1]
                    renpy.hide(gamblers[j].image, layer='underlay')
                    renpy.show(gamblers[j].image, at_list=[Move((x1,y1), (x2,y2), 1.5)], layer='underlay')
                else:
                    renpy.transition(wipedown2, layer='underlay')
                    renpy.hide(gamblers[j].image, layer='underlay')
                j +=1                                                   # увеличиваем счётчик
                alt_mstt = j
                return

# ----------------------------------------------------------------------------------------
# показываем турнирную таблицу — победа в финале (игроки)
    def alt_show_tournament_table_win(gamblers_1,gamblers_2,gamblers_3):
        global alt_mstt
        global alt_tournament_state
        background = 'bg int_dining_hall_sunset'
        table = 'alt_tournament_bg'
        if alt_mstt == 2 and alt_tournament_state == "final_start":
            for m in range(0,2):
                gamblers_3[m].winner = False
        if alt_mstt == 2 or (alt_mstt == 3 and alt_tournament_state == "final_end"):
            renpy.scene('underlay')
            renpy.scene('master')
            renpy.show(background,layer='underlay')
            ui.layer('underlay')
            ui.image(ImageReference(table))
            for i in range(0,8):                                                                                            # вывели первый тур
                gray = im.MatrixColor(gamblers_1[i].face, im.matrix.brightness(-0.1)*im.matrix.saturation(0.05))
                ui.imagebutton(gray, gray, clicked=None, xpos=gamblers_1[i].place_xy[0], ypos=gamblers_1[i].place_xy[1])
            for j in range(0,4):                                                                                            # вывели полуфинал
                gray = im.MatrixColor(gamblers_2[j].face, im.matrix.brightness(-0.1)*im.matrix.saturation(0.05))
                ui.imagebutton(gray, gray, clicked=None, xpos=gamblers_2[j].place_sm_xy[0], ypos=gamblers_2[j].place_sm_xy[1])
            for k in range(0,2):                                                                                            # вывели финал
                gray = im.MatrixColor(gamblers_3[k].face, im.matrix.brightness(-0.1)*im.matrix.saturation(0.05))
                ui.imagebutton(gray, gray, clicked=None, xpos=gamblers_3[k].place_f_xy[0], ypos=gamblers_3[k].place_f_xy[1])
            ui.close()
            for m in range(0,2):
                renpy.show(gamblers_3[m].image, at_list=[Transform(xpos=gamblers_3[m].place_f_xy[0],ypos=gamblers_3[m].place_f_xy[1],xanchor=0,yanchor=0)], layer='underlay')
            if alt_mstt == 2:
                return
        if alt_mstt == 3:
            if gamblers_3[0].winner == False:
                temp = gamblers_3.pop(1)
                gamblers_3.insert(0,temp)
            return
        if alt_mstt < 2:
            j = alt_mstt
            if gamblers_3[j].winner == True:
                x1 = gamblers_3[j].place_f_xy[0]
                y1 = gamblers_3[j].place_f_xy[1]
                x2 = gamblers_3[j].place_w_xy[0]
                y2 = gamblers_3[j].place_w_xy[1]
                renpy.hide(gamblers_3[j].image, layer='underlay')
                renpy.show(gamblers_3[j].image, at_list=[Move((x1,y1), (x2,y2), 1.3)], layer='underlay')
            else:
                renpy.transition(wipedown2, layer='underlay')
                renpy.hide(gamblers_3[j].image, layer='underlay')
            return

# ----------------------------------------------------------------------------------------
# рандомизатор пропуска игры (поражение в 1 туре)
    def alt_drawing_of_detour():
        global alt_day2_gamblers_1_tour
        global alt_day2_gamblers_semifinal
        global alt_day2_my_seat
        winners_1 = []
        alt_day2_my_seat = None
        alt_day2_gamblers_semifinal = []                        # очищаем полуфиналистов
        for i in range(0,8):                                    # сортируем игроков 1 тура
            if alt_day2_gamblers_1_tour[i].winner == True:
                winners_1.append(alt_day2_gamblers_1_tour[i])
            if alt_day2_gamblers_1_tour[i].take == 'me':        # смотрим, где там наш Сёма сидел
                alt_day2_my_seat = i
            alt_day2_gamblers_1_tour[i].winner = False          # сбрасываем всем флаги побед
        alt_day2_gamblers_semifinal = winners_1[:]              # копируем победителей в полуфинальный список
        temp = alt_day2_gamblers_semifinal.pop(2)               # меняем местами 2 и 3 полуфиналиста
        alt_day2_gamblers_semifinal.insert(1,temp)
        return

# ----------------------------------------------------------------------------------------
# рандомизатор пропуска игры (поражение в 1 туре — идём через полуфинал)
    def alt_drawing_of_detour_semifinal():
        global alt_day2_gamblers_semifinal
        for j in [0,2]:                                         # сортируем игроков 1 тура
            alt_day2_gamblers_semifinal[j+renpy.random.choice([0,1])].winner = True        # два рандомных победителя (между 0 и 1, 2 и 3)
        return

# ----------------------------------------------------------------------------------------
# рандомизатор пропуска игры (поражение в 1 туре — идём через финал)
    def alt_drawing_of_detour_final():
        global alt_day2_my_seat
        global alt_day2_gamblers_final
        global alt_rival_final
        if alt_day2_my_seat in [0,1,4,5]:                                  # если Сэмэн сидел сверху
            alt_rival_final = alt_day2_gamblers_final[0]        # то его "победитель" — первый финалист
        elif alt_day2_my_seat in [2,3,6,7]:                                # если Сэмэн сидел снизу
            alt_rival_final = alt_day2_gamblers_final[1]        # то его "победитель" — второй финалист
        return

# ----------------------------------------------------------------------------------------
# сопоставление покерных комбинаций на руках у соперников
    def alt_comparison_poker_hands(winner_hand, loser_hand, winner, loser):
        name_of_combo = {                                           # склонения комбинаций по падежам
            0:  {                                                   # Старшая карта
                    'i':    ["старший", "старшая", "старшие карты"],
                    'r':    ["старшего", "старшей", "старших карт"],
                    'd':    ["старшему", "старшей", "старшим картам"],
                    'v':    ["старшего", "старшую", "старшие карты"],
                    't':    ["старшим", "старшей", "старшими картами"],
                    'p':    ["старшем", "старшей", "старших картах"],
                    'num':  0,                                      # число карты — единственное
                    'case': None,                                   # падеж — транзит на карту
                    'cas0': 'i',                                    # падеж для 0 — именительный
                    'pr':   None,                                   # приставки нет
                    'me':   None                                    # Сёмино местоимение — транзит на карту
                    },
            1:  {                                                   # Пара
                    'i':    ["пара", "", "пары"],
                    'r':    ["пары", "", "пар"],
                    'd':    ["паре" "", "парам"],
                    'v':    ["пару", "", "пары"],
                    't':    ["парой", "", "парами"],
                    'p':    ["паре" "", "парах"],
                    'num':  1,                                      # число карты — множественное
                    'case': 'r',                                    # падеж — родительный (пара двоек)
                    'cas0': 'r',                                    # падеж для 0 — родительный (из троек)
                    'pr':   "из ",                                  # приставка для 0
                    'me':   1                                       # Сёмино местоимение — [мой, моя, мои]
                    },
            2:  {                                                   # Две пары (добавить куда-то "и")
                    'i':    ["две пары", "", "две пары"],
                    'r':    ["двух пар" "", "двух пар"],
                    'd':    ["двум парам", "", "двум парам"],
                    'v':    ["две пары", "", "две пары"],
                    't':    ["двумя парами", "", "двумя парами"],
                    'p':    ["двух парах" "", "двух парах"],
                    'num':  1,                                      # число карты — множественное
                    'case': 'r',                                     # падеж — родительный (пара троек и двоек)
                    'cas0': 'r',                                    # падеж для 0 — родительный (из дам и шестёрок)
                    'pr':   "из ",                                  # приставка для 0
                    'me':   2                                       # Сёмино местоимение — [мой, моя, мои]
                    },
            3:  {                                                   # Тройка
                    'i':    ["тройка", "", "тройки"],
                    'r':    ["тройки" "", "троек"],
                    'd':    ["тройке" "", "тройкам"],
                    'v':    ["тройку" "", "тройки"],
                    't':    ["тройкой" "", "тройками"],
                    'p':    ["тройке" "", "тройках"],
                    'num':  1,                                      # число карты — множественное
                    'case': 'r',                                     # падеж — родительный (тройка дам)
                    'cas0': 'r',                                    # падеж для 0 — родительный (из девяток)
                    'pr':   "из ",                                  # приставка для 0
                    'me':   1                                       # Сёмино местоимение — [мой, моя, мои]
                    },
            4:  {                                                   # Стрит
                    'i':    ["стрит от", "", "стриты"],
                    'r':    ["стрита от", "", "стритов"],
                    'd':    ["стриту от", "", "стритам"],
                    'v':    ["стрит от", "", "стриты"],
                    't':    ["стритом от", "", "стритами"],
                    'p':    ["стрите от", "", "стритах"],
                    'num':  0,                                      # число карты — единственное
                    'case': 'r',                                     # падеж — родительный (стрит от короля, стрит от семёрки)
                    'cas0': 'r',                                    # падеж для 0 — родительный (от семёрки)
                    'pr':   "от ",                                  # приставка для 0
                    'me':   0                                       # Сёмино местоимение — [мой, моя, мои]
                    },
            5:  {                                                   # Флеш ("от" добавить в мастях)
                    'i':    ["флеш", "", "флеши"],
                    'r':    ["флеша", "", "флешей"],
                    'd':    ["флешу", "", "флешам"],
                    'v':    ["флеш", "", "флеши"],
                    't':    ["флешем", "", "флешами"],
                    'p':    ["флеше", "", "флешах"],
                    'num':  0,                                      # число карты — единственное
                    'case': 'r',                                     # падеж — родительный (флеш (хх) от короля, флеш (хх) от семёрки)
                    'cas0': 'r',                                    # падеж для 0 — родительный (от дамы)
                    'pr':   "от ",                                  # приставка для 0
                    'me':   0                                       # Сёмино местоимение — [мой, моя, мои]
                    },
            6:  {                                                   # Фулл-хаус (добавить "из", "и")
                    'i':    ["фулл-хаус из трёх", "", "фулл-хаусы"],
                    'r':    ["фулл-хауса из трёх", "", "фулл-хаусов"],
                    'd':    ["фулл-хаусу из трёх", "", "фулл-хаусам"],
                    'v':    ["фулл-хаус из трёх", "", "фулл-хаусы"],
                    't':    ["фулл-хаусом из трёх", "", "фулл-хаусами"],
                    'p':    ["фулл-хаусе из трёх", "", "фулл-хаусах"],
                    'num':  1,                                      # число карты — множественное
                    'case': 'r',                                     # падеж — родительный (фулл-хаус из тройки королей и двойки шестёрок)
                    'cas0': 'r',                                    # падеж для 0 — родительный (из вальтов и пятёрок)
                    'pr':   "из ",                                  # приставка для 0
                    'me':   0                                       # Сёмино местоимение — [мой, моя, мои]
                    },
            7:  {                                                   # Покер
                    'i':    ["покер из", "", "покеры"],
                    'r':    ["покера из", "", "покеров"],
                    'd':    ["покеру из", "", "покерам"],
                    'v':    ["покер из", "", "покеры"],
                    't':    ["покером из", "", "покерами"],
                    'p':    ["покере из", "", "покерах"],
                    'num':  1,                                      # число карты — множественное
                    'case': 'r',                                     # падеж — родительный (покер из десяток)
                    'cas0': 'r',                                    # падеж для 0 — родительный (из тузов)
                    'pr':   "из ",                                  # приставка для 0
                    'me':   0                                       # Сёмино местоимение — [мой, моя, мои]
                    },
            8:  {                                                   # Стрит-флеш ("от" перенести в масти)
                    'i':    ["стрит-флеш", "", "стрит-флеши"],
                    'r':    ["стрит-флеша", "", "стрит-флешей"],
                    'd':    ["стрит-флешу", "", "стрит-флешам"],
                    'v':    ["стрит-флеш", "", "стрит-флеши"],
                    't':    ["стрит-флешем", "", "стрит-флешами"],
                    'p':    ["стрит-флеше", "", "стрит-флешах"],
                    'num':  0,                                      # число карты — единственное
                    'case': 'r',                                     # падеж — родительный (стрит-флеш (хх) от короля, стрит-флеш (хх) от семёрки)
                    'cas0': 'r',                                    # падеж для 0 — родительный (от дамы)
                    'pr':   "от ",                                  # приставка для 0
                    'me':   0                                       # Сёмино местоимение — [мой, моя, мои]
                    },
            9:  {                                                   # Роял-флеш ("от" НЕ надо, от туза он); и не сравниваем по одинаковым комбинациям, ибо ничья
                    'i':    ["роял-флеш"],
                    'r':    ["роял-флеша"],
                    'd':    ["роял-флешу"],
                    'v':    ["роял-флеш"],
                    't':    ["роял-флешем"],
                    'p':    ["роял-флеше"],
                    'num':  False,                                      # число карты — НЕТ (про туза не говорим)
                    'case': False,                                       # падежа тоже нет
                    'me':   0                                       # Сёмино местоимение — [мой, моя, мои]
                    }
            }
        value_name = {                                             # склонения значений карт по падежам и количеству
            1:  {                                                  # вот тут туза на всякий случай впишем
                    'i':    ["туз", "тузы"],
                    'r':    ["туза", "тузов"],
                    'd':    ["тузу", "тузам"],
                    'v':    ["туза", "тузов"],
                    't':    ["тузом", "тузами"],
                    'p':    ["тузе", "тузах"],
                    'me':   0                                       # Сёмино местоимение — [мой, моя, мои]
                    },
            2:  {                                                  #
                    'i':    ["двойка", "двойки"],
                    'r':    ["двойки", "двоек"],
                    'd':    ["двойке", "двойкам"],
                    'v':    ["двойку", "двойки"],
                    't':    ["двойкой", "двойками"],
                    'p':    ["двойке", "двойках"],
                    'me':   1                                       # Сёмино местоимение — [мой, моя, мои]
                    },
            3:  {                                                  #
                    'i':    ["тройка", "тройки"],
                    'r':    ["тройки", "троек"],
                    'd':    ["тройке", "тройкам"],
                    'v':    ["тройку", "тройки"],
                    't':    ["тройкой", "тройками"],
                    'p':    ["тройке", "тройках"],
                    'me':   1                                       # Сёмино местоимение — [мой, моя, мои]
                    },
            4:  {                                                  #
                    'i':    ["четвёрка", "четвёрки"],
                    'r':    ["четвёрки", "четвёрок"],
                    'd':    ["четвёрке", "четвёркам"],
                    'v':    ["четвёрку", "четвёрки"],
                    't':    ["четвёркой", "четвёрками"],
                    'p':    ["четвёрке", "четвёрках"],
                    'me':   1                                       # Сёмино местоимение — [мой, моя, мои]
                    },
            5:  {                                                  #
                    'i':    ["пятёрка", "пятёрки"],
                    'r':    ["пятёрки", "пятёрок"],
                    'd':    ["пятёрке", "пятёркам"],
                    'v':    ["пятёрку", "пятёрки"],
                    't':    ["пятёркой", "пятёрками"],
                    'p':    ["пятёрке", "пятёрках"],
                    'me':   1                                       # Сёмино местоимение — [мой, моя, мои]
                    },
            6:  {                                                  #
                    'i':    ["шестёрка", "шестёрки"],
                    'r':    ["шестёрки", "шестёрок"],
                    'd':    ["шестёрке", "шестёркам"],
                    'v':    ["шестёрку", "шестёрки"],
                    't':    ["шестёркой", "шестёрками"],
                    'p':    ["шестёрке", "шестёрках"],
                    'me':   1                                       # Сёмино местоимение — [мой, моя, мои]
                    },
            7:  {                                                  #
                    'i':    ["семёрка", "семёрки"],
                    'r':    ["семёрки", "семёрок"],
                    'd':    ["семёрке", "семёркам"],
                    'v':    ["семёрку", "семёрки"],
                    't':    ["семёркой", "семёрками"],
                    'p':    ["семёрке", "семёрках"],
                    'me':   1                                       # Сёмино местоимение — [мой, моя, мои]
                    },
            8:  {                                                  #
                    'i':    ["восьмёрка", "восьмёрки"],
                    'r':    ["восьмёрки", "восьмёрок"],
                    'd':    ["восьмёрке", "восьмёркам"],
                    'v':    ["восьмёрку", "восьмёрки"],
                    't':    ["восьмёркой", "восьмёрками"],
                    'p':    ["восьмёрке", "восьмёрках"],
                    'me':   1                                       # Сёмино местоимение — [мой, моя, мои]
                    },
            9:  {                                                  #
                    'i':    ["девятка", "девятки"],
                    'r':    ["девятки", "девяток"],
                    'd':    ["девятке", "девяткам"],
                    'v':    ["девятку", "девятки"],
                    't':    ["девяткой", "девятками"],
                    'p':    ["девятке", "девятках"],
                    'me':   1                                       # Сёмино местоимение — [мой, моя, мои]
                    },
            10: {                                                  #
                    'i':    ["десятка", "десятки"],
                    'r':    ["десятки", "десяток"],
                    'd':    ["десятке", "десяткам"],
                    'v':    ["десятку", "десятки"],
                    't':    ["десяткой", "десятками"],
                    'p':    ["десятке", "десятках"],
                    'me':   1                                       # Сёмино местоимение — [мой, моя, мои]
                    },
            11: {                                                  # Валет
                    'i':    ["валет", "вальты"],
                    'r':    ["вальта", "вальтов"],
                    'd':    ["вальту", "вальтам"],
                    'v':    ["вальта", "вальтов"],
                    't':    ["вальтом", "вальтами"],
                    'p':    ["вальте", "вальтах"],
                    'me':   0                                       # Сёмино местоимение — [мой, моя, мои]
                    },
            12: {                                                  # Дама
                    'i':    ["дама", "дамы"],
                    'r':    ["дамы", "дам"],
                    'd':    ["даме", "дамам"],
                    'v':    ["даму", "дам"],
                    't':    ["дамой", "дамами"],
                    'p':    ["даме", "дамах"],
                    'me':   1                                       # Сёмино местоимение — [мой, моя, мои]
                    },
            13: {                                                  # Король
                    'i':    ["король", "короли"],
                    'r':    ["короля", "королей"],
                    'd':    ["королю", "королям"],
                    'v':    ["короля", "королей"],
                    't':    ["королём", "королями"],
                    'p':    ["короле", "королях"],
                    'me':   0                                       # Сёмино местоимение — [мой, моя, мои]
                    },
            14: {                                                  # Туз
                    'i':    ["туз", "тузы"],
                    'r':    ["туза", "тузов"],
                    'd':    ["тузу", "тузам"],
                    'v':    ["туза", "тузов"],
                    't':    ["тузом", "тузами"],
                    'p':    ["тузе", "тузах"],
                    'me':   0                                       # Сёмино местоимение — [мой, моя, мои]
                    }
            }
        name_of_suit = ["Дваче","СССР","Унылок","ЮВАО"]     # масти
        combo_difference = {                                                            # разница комбинаций
            0:  {                                                                       # комбинации одинаковы
                    'm':     "почти удалось добиться ничьей.",                          # тут первая фраза ПРОИГРАВШЕГО м
                    'f':     "почти удалось свести игру вничью.",                       # тут первая фраза ПРОИГРАВШЕГО ж
                    'p2':    ["Хотя у нас обоих на руках оказались","но у","а у"],      # 1,3,6 части фразы
                    'cc':    "i",                                                       # падеж комбинации
                    'nc':    2                                                          # индекс в списке комбинаций
                    },
            1:  {                                                                       # разница 1..3
                    'm':     "выиграл с небольшим перевесом.",                          # первая фраза ПОБЕДИТЕЛЯ м
                    'f':     "выиграла с небольшим перевесом.",                         # первая фраза ПОБЕДИТЕЛЯ ж
                    'p2':    ["Всё-таки","по отношению к","хоть ненамного, но младше."], # 1,4,7 части фразы
                    'ccL':   "i",                                                       # падеж первой комбинации
                    'ccw':   "d"                                                        # падеж второй комбинации
                    },
            2:  {                                                                       # разница 4..6
                    'm':     "победил со значительным преимуществом.",                  # первая фраза ПОБЕДИТЕЛЯ м
                    'f':     "победила с подавляющим преимуществом.",                 # первая фраза ПОБЕДИТЕЛЯ ж
                    'p2':    ["С такими картами, как","против","нужно было сдаваться сразу."], # 1,4,7 части фразы
                    'ccL':   "i",                                                       # падеж первой комбинации
                    'ccw':   "r"                                                        # падеж второй комбинации
                    },
            3:  {                                                                       # разница 7..9
                    'm':     "победил с разгромным счётом, можно сказать «всухую».",    # первая фраза ПОБЕДИТЕЛЯ м
                    'f':     "победила с разгромным счётом, можно сказать «всухую».",   # первая фраза ПОБЕДИТЕЛЯ ж
                    'p2':    ["Что ни говори, но","по сравнению с","- это меньше, чем ничего."], # 1,4,7 части фразы
                    'ccL':   "i",                                                       # падеж первой комбинации
                    'ccw':   "t"                                                        # падеж второй комбинации
                    }
            }
        rivals = {                                                                  # сопернички
            'me':   ["Мне","Я",[["мой","моя","мои"],["моему","моей","моим"],["моего","моей","моих"],["моим","моей","моими"]],"","меня","меня"],
            'un':   ["Лене","Лена","её","её","Лены","неё"],
            'sl':   ["Славе","Славя","её","её","Слави","неё"],
            'dv':   ["Алисе","Алиса","её","её","Алисы","неё"],
            'mi':   ["Мику","Мику","её","её","Мику","неё"],
            'us':   ["Ульяне","Ульяна","её","её","Ульянки","неё"],
            'sh':   ["Шурику","Шурик","его","его","Шурика","него"],
            'mz':   ["Жене","Женя","её","её","Жени","неё"]
            }
        residual = winner_hand[0]-loser_hand[0]
        if residual == 0:
            d_combo = 0
        elif residual in [1,2]:
            d_combo = 1
        elif residual in [3,4,5]:
            d_combo = 2
        else:
            d_combo = 3
        if winner in ['me','sh']:                               # Если Семён или Шурик
            g_w = 'm'
        else:
            g_w = 'f'
        if loser in ['me','sh']:                               # Если Семён или Шурик
            g_L = 'm'
        else:
            g_L = 'f'
        if d_combo == 0:                                               # Комбинации одинаковые
            pref_1 = rivals[loser][0]
            suff_1 = combo_difference[d_combo][g_L]
        else:
            pref_1 = rivals[winner][1]
            suff_1 = combo_difference[d_combo][g_w]
        phrase_1 = " ".join([pref_1,suff_1])
        if d_combo != 0:
            if loser == 'me':                                       # проблемы только с Сёмой, с остальными проще
                m_S = name_of_combo[loser_hand[0]]['me']            # местоимение Семёна(цифра) — лезем в комбинации
                if m_S == None:                                     # если в комбинациях его не нашли
                    m_S = value_name[loser_hand[1]]['me']           # смотрим в очках карт
                phr_2_2 =  rivals[loser][2][0][m_S]                 # первое местоимение
            else:                                                   # не Семён
                phr_2_2 = rivals[loser][2]                          # местоимение одно, выбирать не нужно
            if winner == 'me':                                       # проблемы только с Сёмой, с остальными проще
                m_S = name_of_combo[winner_hand[0]]['me']            # местоимение Семёна(цифра) — лезем в комбинации
                if m_S == None:                                      # если в комбинациях его не нашли
                    m_S = value_name[winner_hand[1]]['me']           # смотрим в очках карт
                phr_2_5 =  rivals[winner][2][d_combo][m_S]           # второе местоимение
            else:
                phr_2_5 = rivals[winner][3]                          # местоимение одно, выбирать не нужно
            c_c_L = combo_difference[d_combo]['ccL']                  # падеж первой комбинации  — лузера
            c_c_w = combo_difference[d_combo]['ccw']                  # падеж второй комбинации — победителя
            c_k_L = name_of_combo[loser_hand[0]]['case']            # падеж карт комбинации лузера
            c_k_w = name_of_combo[winner_hand[0]]['case']           # падеж карт комбинации победителя
            k_k_L = name_of_combo[loser_hand[0]]['num']             # число карт комбинации лузера (0 = ед. 1 = мн.)
            k_k_w = name_of_combo[winner_hand[0]]['num']            # число карт комбинации победителя (0 = ед. 1 = мн.)
            if c_k_L == None:
                c_k_L = c_c_L
            if c_k_w == None:
                c_k_w = c_c_w
            if loser_hand[0] == 0 and loser_hand[1] not in [1,11,13,14]: # если старшая карта и НЕ туз, король, валет
                k_L = 1
            else:
                k_L = 0
            if winner_hand[0] == 0 and winner_hand[1] not in [1,11,13,14]: # если старшая карта и НЕ туз, король, валет
                k_w = 1
            else:
                k_w = 0
            if loser_hand[2] == None:                               # если масти нет
                combo_L_s = None
            else:                                                   # масть есть
                combo_L_s = name_of_suit[loser_hand[2]] + " от"        # рояла не будет по определению — читаем масть и добавляем "от"
            if winner_hand[2] == None:                              # если масти нет
                combo_w_s = None
            else:                                                   # масть есть
                if winner_hand[0] == 9:                             # если роял
                    combo_w_s = name_of_suit[winner_hand[2]]           # читаем масть
                else:
                    combo_w_s = name_of_suit[winner_hand[2]] + " от"   # читаем масть и добавляем "от"
            combo_L_c = name_of_combo[loser_hand[0]][c_c_L][k_L]
            combo_w_c = name_of_combo[winner_hand[0]][c_c_w][k_w]
            combo_L_k = value_name[loser_hand[1]][c_k_L][k_k_L]
            if winner_hand[0] != 9:                                     # Если не королевский
                combo_w_k = value_name[winner_hand[1]][c_k_w][k_k_w]
            if loser_hand[0] in [2,6]:                                                # если две пары или фулл-хаус
                combo_L_k_2 = value_name[loser_hand[3]][c_k_L][k_k_L]
            else:
                combo_L_k_2 = None
            if winner_hand[0] in [2,6]:                                                # если две пары или фулл-хаус
                combo_w_k_2 = value_name[winner_hand[3]][c_k_w][k_k_w]
            else:
                combo_w_k_2 = None
            if loser_hand[0] in [5,8]:                                          # если флеши (королевской у лезера не будет всяко)
                phr_2_3 = " ".join([combo_L_c, combo_L_s, combo_L_k])
            elif loser_hand[0] == 6:                                               # если фул-хаус
                phr_2_3 = " ".join([combo_L_c, combo_L_k, "и двух", combo_L_k_2])
            elif loser_hand[0] == 2:                                               # если две пары
                phr_2_3 = " ".join([combo_L_c, combo_L_k, "и", combo_L_k_2])
            else:
                phr_2_3 = " ".join([combo_L_c, combo_L_k])
            if winner_hand[0] == 9:                                                 # на королевском — только масти без карт
                phr_2_6 = " ".join([combo_w_c, combo_w_s])
            elif winner_hand[0] in [5,8]:                                           # если флеши
                phr_2_6 = " ".join([combo_w_c, combo_w_s, combo_w_k])
            elif winner_hand[0] == 6:                                               # если фул-хаус
                phr_2_6 = " ".join([combo_w_c, combo_w_k, "и двух", combo_w_k_2])
            elif winner_hand[0] == 2:                                               # если две пары
                phr_2_6 = " ".join([combo_w_c, combo_w_k, "и", combo_w_k_2])
            else:
                phr_2_6 = " ".join([combo_w_c, combo_w_k])
            phr_2_3 += ","
            if d_combo != 3:
                phr_2_6 += ","
            phr_2_1 = combo_difference[d_combo]['p2'][0]
            phr_2_4 = combo_difference[d_combo]['p2'][1]
            phr_2_7 = combo_difference[d_combo]['p2'][2]
            phrase_2 = " ".join([phr_2_1,phr_2_2,phr_2_3,phr_2_4,phr_2_5,phr_2_6,phr_2_7])
        else:
            phr_2_4 = rivals[winner][4] + " -"                             # Для победителя — либо имя (не Семён), либо местоимение
            phr_2_7 = rivals[loser][5] + " -"                              # Для проигравшего (7 часть) только местоимения
            c_c_0 = combo_difference[d_combo]['cc']                  # падеж комбинации
            c_n_0 = combo_difference[d_combo]['nc']                  # ссылка в список
            phr_2_2 = name_of_combo[loser_hand[0]][c_c_0][c_n_0] + ","
            c_k_w = name_of_combo[winner_hand[0]]['cas0']                   # падеж карты победителя для 0
            c_k_L = name_of_combo[loser_hand[0]]['cas0']                    # падеж карты лузера для 0
            n_k_w = name_of_combo[winner_hand[0]]['num']                    # число карты победителя для 0
            n_k_L = name_of_combo[loser_hand[0]]['num']                     # число карты лузера для 0
            p_k_w = name_of_combo[winner_hand[0]]['pr']                     # приставка карты победителя для 0
            p_k_L = name_of_combo[loser_hand[0]]['pr']                      # приставка карты лузера для 0
            if p_k_w != None:                                               # если приставка есть
                card_w = p_k_w + value_name[winner_hand[1]][c_k_w][n_k_w]   # с приставкой
            else:
                card_w = value_name[winner_hand[1]][c_k_w][n_k_w]           # без приставки (старшая карта)
            if p_k_L != None:                                               # если приставка есть
                card_L = p_k_L + value_name[loser_hand[1]][c_k_L][n_k_L]    # с приставкой
            else:
                card_L = value_name[loser_hand[1]][c_k_L][n_k_L]            # без приставки (старшая карта)
            if winner_hand[0] in [2,6]:                                     # если две пары или фулл-хаус
                phr_2_5 = card_w + " и " + value_name[winner_hand[3]][c_k_w][n_k_w]
            else:
                phr_2_5 = card_w
            if loser_hand[0] in [2,6]:                                     # если две пары или фулл-хаус
                phr_2_8 = card_L + " и " + value_name[loser_hand[3]][c_k_L][n_k_L]
            else:
                phr_2_8 = card_L
            phr_2_5 += ","                                                   #карта победителя
            phr_2_8 += "."                                                   #карта проигравшего
            phr_2_1 = combo_difference[d_combo]['p2'][0]
            phr_2_3 = combo_difference[d_combo]['p2'][1]
            phr_2_6 = combo_difference[d_combo]['p2'][2]
            phrase_2 = " ".join([phr_2_1,phr_2_2,phr_2_3,phr_2_4,phr_2_5,phr_2_6,phr_2_7,phr_2_8])
        return phrase_1, phrase_2

# ----------------------------------------------------------------------------------------
# как кто играет в карты — считаем и запоминаем.
    def alt_who_how_plays_poker():
        global alt_day2_gamblers_summary
        global alt_day2_gamblers_result
        global alt_losers_1_tour
        global alt_winners_1_tour
        global alt_losers_semifinal
        global alt_winners_semifinal
        global alt_day2_gamblers_final
        for k in alt_day2_gamblers_summary.keys():
            alt_day2_gamblers_result[k] = 0
            for m in range(0,3):
                alt_day2_gamblers_summary[k][m] = 0
        for i in range(0,4):
            alt_day2_gamblers_summary[alt_losers_1_tour[i].take][0] = 1
            alt_day2_gamblers_summary[alt_winners_1_tour[i].take][0] = 2
        for j in range(0,2):
            alt_day2_gamblers_summary[alt_losers_semifinal[j].take][1] = 1
            alt_day2_gamblers_summary[alt_winners_semifinal[j].take][1] = 2
            alt_day2_gamblers_summary[alt_day2_gamblers_final[j].take][2] = 2-j
        for x in alt_day2_gamblers_summary.keys():
            for y in range(0,3):
                if alt_day2_gamblers_summary[x][y] == 0:        # не участвовали — пропускаем
                    continue
                elif alt_day2_gamblers_summary[x][y] == 1:      # проиграли — считаем и пропускаем
                    alt_day2_gamblers_result[x] = 10*y+1
                    continue
                elif alt_day2_gamblers_summary[x][y] == 2:      # выиграли — считаем
                    alt_day2_gamblers_result[x] = 10*y+2
        return





# =====================================================================================================================================================
#                                                        ПОКАЗЫВАЕМ ТУРНИРНУЮ ТАБЛИЦУ
# =====================================================================================================================================================
label show_tournament_table:                                                                                        # сюда ныряем из турнира
    if alt_tournament_state == "1_round_start":                                                                     # если начало 1-го раунда
        $ alt_show_tournament_table_1_round(alt_day2_gamblers_1_tour)                                               # вызываем турнирную таблицу — там показывается очередная фишка
    elif alt_tournament_state == "1_round_end":
        $ alt_show_tournament_table_semifinal(alt_day2_gamblers_1_tour)
    elif alt_tournament_state == "semifinal_start":
        $ alt_show_tournament_table_semifinal(alt_day2_gamblers_1_tour,alt_day2_gamblers_semifinal)
    elif alt_tournament_state == "semifinal_end":
        $ alt_show_tournament_table_final(alt_day2_gamblers_semifinal)
    elif alt_tournament_state in ["final_start","final_end"]:
        $ alt_show_tournament_table_win(alt_day2_gamblers_1_tour, alt_day2_gamblers_semifinal,alt_day2_gamblers_final)
    return